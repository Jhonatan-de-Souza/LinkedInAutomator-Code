from typing import Any, ClassVar, Iterable, Iterator, Optional, Union

from typing import overload
import io
import lief # type: ignore
import lief.ELF # type: ignore
import lief.ELF.AArch64Feature # type: ignore
import lief.ELF.Binary # type: ignore
import lief.ELF.Builder # type: ignore
import lief.ELF.CoreAuxv # type: ignore
import lief.ELF.CoreFile # type: ignore
import lief.ELF.CorePrPsInfo # type: ignore
import lief.ELF.CorePrStatus # type: ignore
import lief.ELF.CorePrStatus.Registers # type: ignore
import lief.ELF.Note # type: ignore
import lief.ELF.NoteAbi # type: ignore
import lief.ELF.NoteGnuProperty # type: ignore
import lief.ELF.NoteGnuProperty.Property # type: ignore
import lief.ELF.Section # type: ignore
import lief.ELF.Segment # type: ignore
import lief.ELF.SymbolVersionDefinition # type: ignore
import lief.ELF.SymbolVersionRequirement # type: ignore
import lief.ELF.X86Features # type: ignore
import lief.ELF.X86ISA # type: ignore
import os

class AArch64Feature(NoteGnuProperty.Property):
    class FEATURE:
        BTI: ClassVar[AArch64Feature.FEATURE] = ...
        PAC: ClassVar[AArch64Feature.FEATURE] = ...
        UNKNOWN: ClassVar[AArch64Feature.FEATURE] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def from_value(arg: int, /) -> lief.ELF.AArch64Feature.FEATURE: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def features(self) -> list[lief.ELF.AArch64Feature.FEATURE]: ...

class ARCH:
    AARCH64: ClassVar[ARCH] = ...
    ALPHA: ClassVar[ARCH] = ...
    ALTERA_NIOS2: ClassVar[ARCH] = ...
    AMDGPU: ClassVar[ARCH] = ...
    ARC: ClassVar[ARCH] = ...
    ARCA: ClassVar[ARCH] = ...
    ARCH_56800EX: ClassVar[ARCH] = ...
    ARCH_68HC05: ClassVar[ARCH] = ...
    ARCH_68HC08: ClassVar[ARCH] = ...
    ARCH_68HC11: ClassVar[ARCH] = ...
    ARCH_68HC12: ClassVar[ARCH] = ...
    ARCH_68HC16: ClassVar[ARCH] = ...
    ARCH_68K: ClassVar[ARCH] = ...
    ARCH_78KOR: ClassVar[ARCH] = ...
    ARCH_8051: ClassVar[ARCH] = ...
    ARCH_860: ClassVar[ARCH] = ...
    ARCH_88K: ClassVar[ARCH] = ...
    ARCH_960: ClassVar[ARCH] = ...
    ARC_COMPACT: ClassVar[ARCH] = ...
    ARC_COMPACT2: ClassVar[ARCH] = ...
    ARM: ClassVar[ARCH] = ...
    AVR: ClassVar[ARCH] = ...
    AVR32: ClassVar[ARCH] = ...
    BA1: ClassVar[ARCH] = ...
    BA2: ClassVar[ARCH] = ...
    BLACKFIN: ClassVar[ARCH] = ...
    BPF: ClassVar[ARCH] = ...
    C166: ClassVar[ARCH] = ...
    CDP: ClassVar[ARCH] = ...
    CE: ClassVar[ARCH] = ...
    CLOUDSHIELD: ClassVar[ARCH] = ...
    COGE: ClassVar[ARCH] = ...
    COLDFIRE: ClassVar[ARCH] = ...
    COOL: ClassVar[ARCH] = ...
    COREA_1ST: ClassVar[ARCH] = ...
    COREA_2ND: ClassVar[ARCH] = ...
    CR: ClassVar[ARCH] = ...
    CR16: ClassVar[ARCH] = ...
    CRAYNV2: ClassVar[ARCH] = ...
    CRIS: ClassVar[ARCH] = ...
    CRX: ClassVar[ARCH] = ...
    CSR_KALIMBA: ClassVar[ARCH] = ...
    CUDA: ClassVar[ARCH] = ...
    CYPRESS_M8C: ClassVar[ARCH] = ...
    D10V: ClassVar[ARCH] = ...
    D30V: ClassVar[ARCH] = ...
    DSP24: ClassVar[ARCH] = ...
    DSPIC30F: ClassVar[ARCH] = ...
    DXP: ClassVar[ARCH] = ...
    ECOG1: ClassVar[ARCH] = ...
    ECOG16: ClassVar[ARCH] = ...
    ECOG1X: ClassVar[ARCH] = ...
    ECOG2: ClassVar[ARCH] = ...
    ETPU: ClassVar[ARCH] = ...
    EXCESS: ClassVar[ARCH] = ...
    F2MC16: ClassVar[ARCH] = ...
    FIREPATH: ClassVar[ARCH] = ...
    FR20: ClassVar[ARCH] = ...
    FR30: ClassVar[ARCH] = ...
    FX66: ClassVar[ARCH] = ...
    H8S: ClassVar[ARCH] = ...
    H8_300: ClassVar[ARCH] = ...
    H8_300H: ClassVar[ARCH] = ...
    H8_500: ClassVar[ARCH] = ...
    HEXAGON: ClassVar[ARCH] = ...
    HUANY: ClassVar[ARCH] = ...
    IAMCU: ClassVar[ARCH] = ...
    IA_64: ClassVar[ARCH] = ...
    INTEL205: ClassVar[ARCH] = ...
    INTEL206: ClassVar[ARCH] = ...
    INTEL207: ClassVar[ARCH] = ...
    INTEL208: ClassVar[ARCH] = ...
    INTEL209: ClassVar[ARCH] = ...
    IP2K: ClassVar[ARCH] = ...
    JAVELIN: ClassVar[ARCH] = ...
    K10M: ClassVar[ARCH] = ...
    KM32: ClassVar[ARCH] = ...
    KMX16: ClassVar[ARCH] = ...
    KMX32: ClassVar[ARCH] = ...
    KMX8: ClassVar[ARCH] = ...
    KVARC: ClassVar[ARCH] = ...
    L10M: ClassVar[ARCH] = ...
    LATTICEMICO32: ClassVar[ARCH] = ...
    LOONGARCH: ClassVar[ARCH] = ...
    M16C: ClassVar[ARCH] = ...
    M32: ClassVar[ARCH] = ...
    M32C: ClassVar[ARCH] = ...
    M32R: ClassVar[ARCH] = ...
    MANIK: ClassVar[ARCH] = ...
    MAX: ClassVar[ARCH] = ...
    MAXQ30: ClassVar[ARCH] = ...
    MCHP_PIC: ClassVar[ARCH] = ...
    MCST_ELBRUS: ClassVar[ARCH] = ...
    ME16: ClassVar[ARCH] = ...
    METAG: ClassVar[ARCH] = ...
    MIPS: ClassVar[ARCH] = ...
    MIPS_RS3_LE: ClassVar[ARCH] = ...
    MIPS_X: ClassVar[ARCH] = ...
    MMA: ClassVar[ARCH] = ...
    MMDSP_PLUS: ClassVar[ARCH] = ...
    MMIX: ClassVar[ARCH] = ...
    MN10200: ClassVar[ARCH] = ...
    MN10300: ClassVar[ARCH] = ...
    MSP430: ClassVar[ARCH] = ...
    NCPU: ClassVar[ARCH] = ...
    NDR1: ClassVar[ARCH] = ...
    NDS32: ClassVar[ARCH] = ...
    NONE: ClassVar[ARCH] = ...
    NORC: ClassVar[ARCH] = ...
    NS32K: ClassVar[ARCH] = ...
    OPEN8: ClassVar[ARCH] = ...
    OPENRISC: ClassVar[ARCH] = ...
    PARISC: ClassVar[ARCH] = ...
    PCP: ClassVar[ARCH] = ...
    PDP10: ClassVar[ARCH] = ...
    PDP11: ClassVar[ARCH] = ...
    PDSP: ClassVar[ARCH] = ...
    PJ: ClassVar[ARCH] = ...
    PPC: ClassVar[ARCH] = ...
    PPC64: ClassVar[ARCH] = ...
    PRISM: ClassVar[ARCH] = ...
    R32C: ClassVar[ARCH] = ...
    RCE: ClassVar[ARCH] = ...
    RH32: ClassVar[ARCH] = ...
    RISCV: ClassVar[ARCH] = ...
    RL78: ClassVar[ARCH] = ...
    RS08: ClassVar[ARCH] = ...
    RX: ClassVar[ARCH] = ...
    S370: ClassVar[ARCH] = ...
    S390: ClassVar[ARCH] = ...
    SCORE7: ClassVar[ARCH] = ...
    SEP: ClassVar[ARCH] = ...
    SE_C17: ClassVar[ARCH] = ...
    SE_C33: ClassVar[ARCH] = ...
    SH: ClassVar[ARCH] = ...
    SHARC: ClassVar[ARCH] = ...
    SLE9X: ClassVar[ARCH] = ...
    SNP1K: ClassVar[ARCH] = ...
    SPARC: ClassVar[ARCH] = ...
    SPARC32PLUS: ClassVar[ARCH] = ...
    SPARCV9: ClassVar[ARCH] = ...
    SPU: ClassVar[ARCH] = ...
    ST100: ClassVar[ARCH] = ...
    ST19: ClassVar[ARCH] = ...
    ST200: ClassVar[ARCH] = ...
    ST7: ClassVar[ARCH] = ...
    ST9PLUS: ClassVar[ARCH] = ...
    STARCORE: ClassVar[ARCH] = ...
    STM8: ClassVar[ARCH] = ...
    STXP7X: ClassVar[ARCH] = ...
    SVX: ClassVar[ARCH] = ...
    TILE64: ClassVar[ARCH] = ...
    TILEGX: ClassVar[ARCH] = ...
    TILEPRO: ClassVar[ARCH] = ...
    TINYJ: ClassVar[ARCH] = ...
    TI_C2000: ClassVar[ARCH] = ...
    TI_C5500: ClassVar[ARCH] = ...
    TI_C6000: ClassVar[ARCH] = ...
    TMM_GPP: ClassVar[ARCH] = ...
    TPC: ClassVar[ARCH] = ...
    TRICORE: ClassVar[ARCH] = ...
    TRIMEDIA: ClassVar[ARCH] = ...
    TSK3000: ClassVar[ARCH] = ...
    UNICORE: ClassVar[ARCH] = ...
    V800: ClassVar[ARCH] = ...
    V850: ClassVar[ARCH] = ...
    VAX: ClassVar[ARCH] = ...
    VIDEOCORE: ClassVar[ARCH] = ...
    VIDEOCORE3: ClassVar[ARCH] = ...
    VIDEOCORE5: ClassVar[ARCH] = ...
    VPP500: ClassVar[ARCH] = ...
    XCORE: ClassVar[ARCH] = ...
    XGATE: ClassVar[ARCH] = ...
    XIMO16: ClassVar[ARCH] = ...
    XTENSA: ClassVar[ARCH] = ...
    ZSP: ClassVar[ARCH] = ...
    i386: ClassVar[ARCH] = ...
    x86_64: ClassVar[ARCH] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.ARCH: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class ARM_EFLAGS:
    EABI_VER1: ClassVar[ARM_EFLAGS] = ...
    EABI_VER2: ClassVar[ARM_EFLAGS] = ...
    EABI_VER3: ClassVar[ARM_EFLAGS] = ...
    EABI_VER4: ClassVar[ARM_EFLAGS] = ...
    EABI_VER5: ClassVar[ARM_EFLAGS] = ...
    SOFT_FLOAT: ClassVar[ARM_EFLAGS] = ...
    UNKNOWN: ClassVar[ARM_EFLAGS] = ...
    VFP_FLOAT: ClassVar[ARM_EFLAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.ARM_EFLAGS: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.ARM_EFLAGS, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.ARM_EFLAGS, /) -> lief.ELF.ARM_EFLAGS: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.ARM_EFLAGS, /) -> int: ...
    @property
    def value(self) -> int: ...

class AndroidIdent(Note):
    ndk_build_number: str
    ndk_version: str
    sdk_version: int
    def __init__(self, *args, **kwargs) -> None: ...

class Binary(lief.Binary):
    class PHDR_RELOC:
        AUTO: ClassVar[Binary.PHDR_RELOC] = ...
        BSS_END: ClassVar[Binary.PHDR_RELOC] = ...
        FILE_END: ClassVar[Binary.PHDR_RELOC] = ...
        PIE_SHIFT: ClassVar[Binary.PHDR_RELOC] = ...
        SEGMENT_GAP: ClassVar[Binary.PHDR_RELOC] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...

    class it_dyn_static_symbols:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Symbol: ...
        def __iter__(self) -> lief.ELF.Binary.it_dyn_static_symbols: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Symbol: ...

    class it_dynamic_entries:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.DynamicEntry: ...
        def __iter__(self) -> lief.ELF.Binary.it_dynamic_entries: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.DynamicEntry: ...

    class it_filter_relocation:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Relocation: ...
        def __iter__(self) -> lief.ELF.Binary.it_filter_relocation: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Relocation: ...

    class it_filter_symbols:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Symbol: ...
        def __iter__(self) -> lief.ELF.Binary.it_filter_symbols: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Symbol: ...

    class it_notes:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Note: ...
        def __iter__(self) -> lief.ELF.Binary.it_notes: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Note: ...

    class it_relocations:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Relocation: ...
        def __iter__(self) -> lief.ELF.Binary.it_relocations: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Relocation: ...

    class it_sections:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Section: ...
        def __iter__(self) -> lief.ELF.Binary.it_sections: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Section: ...

    class it_segments:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Segment: ...
        def __iter__(self) -> lief.ELF.Binary.it_segments: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Segment: ...

    class it_symbols:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Symbol: ...
        def __iter__(self) -> lief.ELF.Binary.it_symbols: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Symbol: ...

    class it_symbols_version:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.SymbolVersion: ...
        def __iter__(self) -> lief.ELF.Binary.it_symbols_version: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.SymbolVersion: ...

    class it_symbols_version_definition:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.SymbolVersionDefinition: ...
        def __iter__(self) -> lief.ELF.Binary.it_symbols_version_definition: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.SymbolVersionDefinition: ...

    class it_symbols_version_requirement:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.SymbolVersionRequirement: ...
        def __iter__(self) -> lief.ELF.Binary.it_symbols_version_requirement: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.SymbolVersionRequirement: ...
    interpreter: str
    overlay: memoryview
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def add(self, arg: lief.ELF.DynamicEntry, /) -> lief.ELF.DynamicEntry: ...
    @overload
    def add(self, section: lief.ELF.Section, loaded: bool = ...) -> lief.ELF.Section: ...
    @overload
    def add(self, segment: lief.ELF.Segment, base: int = ...) -> lief.ELF.Segment: ...
    @overload
    def add(self, note: lief.ELF.Note) -> lief.ELF.Note: ...
    def add_dynamic_relocation(self, relocation: lief.ELF.Relocation) -> lief.ELF.Relocation: ...
    def add_dynamic_symbol(self, symbol: lief.ELF.Symbol, symbol_version: Optional[lief.ELF.SymbolVersion] = ...) -> lief.ELF.Symbol: ...
    def add_exported_function(self, address: int, name: str = ...) -> lief.ELF.Symbol: ...
    def add_library(self, library_name: str) -> lief.ELF.DynamicEntryLibrary: ...
    def add_object_relocation(self, relocation: lief.ELF.Relocation, section: lief.ELF.Section) -> lief.ELF.Relocation: ...
    def add_pltgot_relocation(self, relocation: lief.ELF.Relocation) -> lief.ELF.Relocation: ...
    def add_static_symbol(self, symbol: lief.ELF.Symbol) -> lief.ELF.Symbol: ...
    @overload
    def export_symbol(self, symbol: lief.ELF.Symbol) -> lief.ELF.Symbol: ...
    @overload
    def export_symbol(self, symbol_name: str, value: int = ...) -> lief.ELF.Symbol: ...
    @overload
    def extend(self, segment: lief.ELF.Segment, size: int) -> lief.ELF.Segment: ...
    @overload
    def extend(self, segment: lief.ELF.Section, size: int) -> lief.ELF.Section: ...
    @overload
    def get(self, tag: lief.ELF.DYNAMIC_TAGS) -> lief.ELF.DynamicEntry: ...
    @overload
    def get(self, type: lief.ELF.SEGMENT_TYPES) -> lief.ELF.Segment: ...
    @overload
    def get(self, type: lief.ELF.Note.TYPE) -> lief.ELF.Note: ...
    @overload
    def get(self, type: lief.ELF.SECTION_TYPES) -> lief.ELF.Section: ...
    def get_dynamic_symbol(self, symbol_name: str) -> lief.ELF.Symbol: ...
    def get_library(self, library_name: str) -> lief.ELF.DynamicEntryLibrary: ...
    @overload
    def get_relocation(self, symbol_name: str) -> lief.ELF.Relocation: ...
    @overload
    def get_relocation(self, symbol: lief.ELF.Symbol) -> lief.ELF.Relocation: ...
    @overload
    def get_relocation(self, address: int) -> lief.ELF.Relocation: ...
    def get_section(self, section_name: str) -> lief.ELF.Section: ...
    def get_static_symbol(self, symbol_name: str) -> lief.ELF.Symbol: ...
    def get_strings(self, min_size: int = ...) -> list[str]: ...
    @overload
    def has(self, tag: lief.ELF.DYNAMIC_TAGS) -> bool: ...
    @overload
    def has(self, type: lief.ELF.SEGMENT_TYPES) -> bool: ...
    @overload
    def has(self, type: lief.ELF.Note.TYPE) -> bool: ...
    @overload
    def has(self, type: lief.ELF.SECTION_TYPES) -> bool: ...
    def has_dynamic_symbol(self, symbol_name: str) -> bool: ...
    def has_library(self, library_name: str) -> bool: ...
    def has_section(self, section_name: str) -> bool: ...
    def has_section_with_offset(self, offset: int) -> bool: ...
    def has_section_with_va(self, virtual_address: int) -> bool: ...
    def has_static_symbol(self, symbol_name: str) -> bool: ...
    @overload
    def patch_pltgot(self, symbol_name: str, address: int) -> None: ...
    @overload
    def patch_pltgot(self, symbol: lief.ELF.Symbol, address: int) -> None: ...
    def permute_dynamic_symbols(self, permutation: list[int]) -> None: ...
    def relocate_phdr_table(self, type: lief.ELF.Binary.PHDR_RELOC = ...) -> int: ...
    @overload
    def remove(self, dynamic_entry: lief.ELF.DynamicEntry) -> None: ...
    @overload
    def remove(self, tag: lief.ELF.DYNAMIC_TAGS) -> None: ...
    @overload
    def remove(self, section: lief.ELF.Section, clear: bool = ...) -> None: ...
    @overload
    def remove(self, note: lief.ELF.Note) -> None: ...
    @overload
    def remove(self, type: lief.ELF.Note.TYPE) -> None: ...
    @overload
    def remove_dynamic_symbol(self, arg: lief.ELF.Symbol, /) -> None: ...
    @overload
    def remove_dynamic_symbol(self, arg: str, /) -> None: ...
    def remove_library(self, library_name: str) -> None: ...
    def remove_static_symbol(self, arg: lief.ELF.Symbol, /) -> None: ...
    def replace(self, new_segment: lief.ELF.Segment, original_segment: lief.ELF.Segment, base: int = ...) -> lief.ELF.Segment: ...
    def section_from_offset(self, offset: int, skip_nobits: bool = ...) -> lief.ELF.Section: ...
    def section_from_virtual_address(self, address: int, skip_nobits: bool = ...) -> lief.ELF.Section: ...
    def segment_from_offset(self, offset: int) -> lief.ELF.Segment: ...
    def segment_from_virtual_address(self, address: int) -> lief.ELF.Segment: ...
    def strip(self) -> None: ...
    def virtual_address_to_offset(self, virtual_address: int) -> Union[int,lief.lief_errors]: ...
    @overload
    def write(self, output: str) -> None: ...
    @overload
    def write(self, output: str, config: lief.ELF.Builder.config_t) -> None: ...
    @overload
    def __contains__(self, arg: lief.ELF.SEGMENT_TYPES, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.DYNAMIC_TAGS, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.Note.TYPE, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.SECTION_TYPES, /) -> bool: ...
    @overload
    def __getitem__(self, arg: lief.ELF.SEGMENT_TYPES, /) -> lief.ELF.Segment: ...
    @overload
    def __getitem__(self, arg: lief.ELF.Note.TYPE, /) -> lief.ELF.Note: ...
    @overload
    def __getitem__(self, arg: lief.ELF.DYNAMIC_TAGS, /) -> lief.ELF.DynamicEntry: ...
    @overload
    def __getitem__(self, arg: lief.ELF.SECTION_TYPES, /) -> lief.ELF.Section: ...
    @overload
    def __iadd__(self, arg: lief.ELF.Segment, /) -> lief.ELF.Binary: ...
    @overload
    def __iadd__(self, arg: lief.ELF.Section, /) -> lief.ELF.Binary: ...
    @overload
    def __iadd__(self, arg: lief.ELF.DynamicEntry, /) -> lief.ELF.Binary: ...
    @overload
    def __iadd__(self, arg: lief.ELF.Note, /) -> lief.ELF.Binary: ...
    @overload
    def __isub__(self, arg: lief.ELF.DynamicEntry, /) -> lief.ELF.Binary: ...
    @overload
    def __isub__(self, arg: lief.ELF.DYNAMIC_TAGS, /) -> lief.ELF.Binary: ...
    @overload
    def __isub__(self, arg: lief.ELF.Note, /) -> lief.ELF.Binary: ...
    @overload
    def __isub__(self, arg: lief.ELF.Note.TYPE, /) -> lief.ELF.Binary: ...
    @property
    def dtor_functions(self) -> list[lief.Function]: ...
    @property
    def dynamic_entries(self) -> lief.ELF.Binary.it_dynamic_entries: ...
    @property
    def dynamic_relocations(self) -> lief.ELF.Binary.it_filter_relocation: ...
    @property
    def dynamic_symbols(self) -> lief.ELF.Binary.it_symbols: ...
    @property
    def eof_offset(self) -> int: ...
    @property
    def exported_symbols(self) -> lief.ELF.Binary.it_filter_symbols: ...
    @property
    def functions(self) -> list[lief.Function]: ...
    @property
    def gnu_hash(self) -> lief.ELF.GnuHash: ...
    @property
    def has_interpreter(self) -> bool: ...
    @property
    def has_notes(self) -> bool: ...
    @property
    def has_overlay(self) -> bool: ...
    @property
    def header(self) -> lief.ELF.Header: ...  # type: ignore
    @property
    def imagebase(self) -> int: ...
    @property
    def imported_symbols(self) -> lief.ELF.Binary.it_filter_symbols: ...
    @property
    def is_pie(self) -> bool: ...
    @property
    def last_offset_section(self) -> int: ...
    @property
    def last_offset_segment(self) -> int: ...
    @property
    def next_virtual_address(self) -> int: ...
    @property
    def notes(self) -> lief.ELF.Binary.it_notes: ...
    @property
    def object_relocations(self) -> lief.ELF.Binary.it_filter_relocation: ...
    @property
    def pltgot_relocations(self) -> lief.ELF.Binary.it_filter_relocation: ...
    @property
    def relocations(self) -> lief.ELF.Binary.it_relocations: ...  # type: ignore
    @property
    def sections(self) -> lief.ELF.Binary.it_sections: ...  # type: ignore
    @property
    def segments(self) -> lief.ELF.Binary.it_segments: ...
    @property
    def static_symbols(self) -> lief.ELF.Binary.it_symbols: ...
    @property
    def strings(self) -> list[Union[str,bytes]]: ...
    @property
    def symbols(self) -> lief.ELF.Binary.it_dyn_static_symbols: ...  # type: ignore
    @property
    def symbols_version(self) -> lief.ELF.Binary.it_symbols_version: ...
    @property
    def symbols_version_definition(self) -> lief.ELF.Binary.it_symbols_version_definition: ...
    @property
    def symbols_version_requirement(self) -> lief.ELF.Binary.it_symbols_version_requirement: ...
    @property
    def sysv_hash(self) -> lief.ELF.SysvHash: ...
    @property
    def type(self) -> lief.ELF.ELF_CLASS: ...
    @property
    def use_gnu_hash(self) -> bool: ...
    @property
    def use_sysv_hash(self) -> bool: ...
    @property
    def virtual_size(self) -> int: ...

class Builder:
    class config_t:
        dt_hash: bool
        dyn_str: bool
        dynamic_section: bool
        fini_array: bool
        force_relocate: bool
        init_array: bool
        interpreter: bool
        jmprel: bool
        notes: bool
        preinit_array: bool
        rela: bool
        static_symtab: bool
        sym_verdef: bool
        sym_verneed: bool
        sym_versym: bool
        symtab: bool
        def __init__(self) -> None: ...
    config: lief.ELF.Builder.config_t
    def __init__(self, elf_binary: lief.ELF.Binary) -> None: ...
    def build(self) -> None: ...
    def get_build(self) -> list[int]: ...
    def write(self, output: str) -> None: ...

class CoreAuxv(Note):
    class TYPE:
        BASE: ClassVar[CoreAuxv.TYPE] = ...
        BASE_PLATFORM: ClassVar[CoreAuxv.TYPE] = ...
        CLKTCK: ClassVar[CoreAuxv.TYPE] = ...
        DCACHEBSIZE: ClassVar[CoreAuxv.TYPE] = ...
        EGID: ClassVar[CoreAuxv.TYPE] = ...
        END: ClassVar[CoreAuxv.TYPE] = ...
        ENTRY: ClassVar[CoreAuxv.TYPE] = ...
        EUID: ClassVar[CoreAuxv.TYPE] = ...
        EXECFD: ClassVar[CoreAuxv.TYPE] = ...
        EXECFN: ClassVar[CoreAuxv.TYPE] = ...
        FLAGS: ClassVar[CoreAuxv.TYPE] = ...
        FPUCW: ClassVar[CoreAuxv.TYPE] = ...
        GID: ClassVar[CoreAuxv.TYPE] = ...
        HWCAP: ClassVar[CoreAuxv.TYPE] = ...
        HWCAP2: ClassVar[CoreAuxv.TYPE] = ...
        ICACHEBSIZE: ClassVar[CoreAuxv.TYPE] = ...
        IGNORE: ClassVar[CoreAuxv.TYPE] = ...
        IGNOREPPC: ClassVar[CoreAuxv.TYPE] = ...
        NOTELF: ClassVar[CoreAuxv.TYPE] = ...
        PAGESZ: ClassVar[CoreAuxv.TYPE] = ...
        PHDR: ClassVar[CoreAuxv.TYPE] = ...
        PHENT: ClassVar[CoreAuxv.TYPE] = ...
        PHNUM: ClassVar[CoreAuxv.TYPE] = ...
        RANDOM: ClassVar[CoreAuxv.TYPE] = ...
        SECURE: ClassVar[CoreAuxv.TYPE] = ...
        SYSINFO: ClassVar[CoreAuxv.TYPE] = ...
        SYSINFO_EHDR: ClassVar[CoreAuxv.TYPE] = ...
        TGT_PLATFORM: ClassVar[CoreAuxv.TYPE] = ...
        UCACHEBSIZE: ClassVar[CoreAuxv.TYPE] = ...
        UID: ClassVar[CoreAuxv.TYPE] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def from_value(arg: int, /) -> lief.ELF.CoreAuxv.TYPE: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, type: lief.ELF.CoreAuxv.TYPE) -> Optional[int]: ...
    @overload
    def set(self, type: lief.ELF.CoreAuxv.TYPE, value: int) -> bool: ...
    @overload
    def set(self, arg: dict[lief.ELF.CoreAuxv.TYPE,int], /) -> bool: ...
    def __getitem__(self, arg: lief.ELF.CoreAuxv.TYPE, /) -> Optional[int]: ...
    @overload
    def __setitem__(self, arg0: lief.ELF.CoreAuxv.TYPE, arg1: int, /) -> bool: ...
    @overload
    def __setitem__(self, arg: dict[lief.ELF.CoreAuxv.TYPE,int], /) -> bool: ...
    @property
    def values(self) -> dict[lief.ELF.CoreAuxv.TYPE,int]: ...

class CoreFile(Note):
    class entry_t:
        end: int
        file_ofs: int
        path: str
        start: int
        def __init__(self, *args, **kwargs) -> None: ...

    class files_t:
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, arg: lief.ELF.CoreFile.files_t) -> None: ...
        @overload
        def __init__(self, arg: Iterable[lief.ELF.CoreFile.entry_t], /) -> None: ...
        def append(self, arg: lief.ELF.CoreFile.entry_t, /) -> None: ...
        def clear(self) -> None: ...
        def extend(self, arg: lief.ELF.CoreFile.files_t, /) -> None: ...
        def insert(self, arg0: int, arg1: lief.ELF.CoreFile.entry_t, /) -> None: ...
        def pop(self, index: int = ...) -> lief.ELF.CoreFile.entry_t: ...
        def __bool__(self) -> bool: ...
        @overload
        def __delitem__(self, arg: int, /) -> None: ...
        @overload
        def __delitem__(self, arg: slice, /) -> None: ...
        @overload
        def __getitem__(self, arg: int, /) -> lief.ELF.CoreFile.entry_t: ...
        @overload
        def __getitem__(self, arg: slice, /) -> lief.ELF.CoreFile.files_t: ...
        def __iter__(self) -> Iterator: ...
        def __len__(self) -> int: ...
        @overload
        def __setitem__(self, arg0: int, arg1: lief.ELF.CoreFile.entry_t, /) -> None: ...
        @overload
        def __setitem__(self, arg0: slice, arg1: lief.ELF.CoreFile.files_t, /) -> None: ...
    files: lief.ELF.CoreFile.files_t
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class CorePrPsInfo(Note):
    class info_t:
        args: str
        filename: str
        flag: int
        gid: int
        nice: int
        pgrp: int
        pid: int
        ppid: int
        sid: int
        sname: str
        state: int
        uid: int
        zombie: bool
        def __init__(self, *args, **kwargs) -> None: ...
        @property
        def args_stripped(self) -> str: ...
        @property
        def filename_stripped(self) -> str: ...
    info: Optional[lief.ELF.CorePrPsInfo.info_t]
    def __init__(self, *args, **kwargs) -> None: ...

class CorePrStatus(Note):
    class Registers:
        class AARCH64:
            PC: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            PSTATE: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X0: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X1: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X10: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X11: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X12: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X13: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X14: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X15: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X16: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X17: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X18: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X19: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X2: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X20: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X21: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X22: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X23: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X24: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X25: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X26: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X27: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X28: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X29: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X3: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X30: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X31: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X4: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X5: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X6: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X7: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X8: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            X9: ClassVar[CorePrStatus.Registers.AARCH64] = ...
            __name__: str
            def __init__(self, *args, **kwargs) -> None: ...
            @staticmethod
            def from_value(arg: int, /) -> lief.ELF.CorePrStatus.Registers.AARCH64: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __le__(self, other) -> bool: ...
            def __lt__(self, other) -> bool: ...
            @property
            def value(self) -> int: ...
    
        class ARM:
            CPSR: ClassVar[CorePrStatus.Registers.ARM] = ...
            R0: ClassVar[CorePrStatus.Registers.ARM] = ...
            R1: ClassVar[CorePrStatus.Registers.ARM] = ...
            R10: ClassVar[CorePrStatus.Registers.ARM] = ...
            R11: ClassVar[CorePrStatus.Registers.ARM] = ...
            R12: ClassVar[CorePrStatus.Registers.ARM] = ...
            R13: ClassVar[CorePrStatus.Registers.ARM] = ...
            R14: ClassVar[CorePrStatus.Registers.ARM] = ...
            R15: ClassVar[CorePrStatus.Registers.ARM] = ...
            R2: ClassVar[CorePrStatus.Registers.ARM] = ...
            R3: ClassVar[CorePrStatus.Registers.ARM] = ...
            R4: ClassVar[CorePrStatus.Registers.ARM] = ...
            R5: ClassVar[CorePrStatus.Registers.ARM] = ...
            R6: ClassVar[CorePrStatus.Registers.ARM] = ...
            R7: ClassVar[CorePrStatus.Registers.ARM] = ...
            R8: ClassVar[CorePrStatus.Registers.ARM] = ...
            R9: ClassVar[CorePrStatus.Registers.ARM] = ...
            __name__: str
            def __init__(self, *args, **kwargs) -> None: ...
            @staticmethod
            def from_value(arg: int, /) -> lief.ELF.CorePrStatus.Registers.ARM: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __le__(self, other) -> bool: ...
            def __lt__(self, other) -> bool: ...
            @property
            def value(self) -> int: ...
    
        class X86:
            CS: ClassVar[CorePrStatus.Registers.X86] = ...
            DS: ClassVar[CorePrStatus.Registers.X86] = ...
            EAX: ClassVar[CorePrStatus.Registers.X86] = ...
            EBP: ClassVar[CorePrStatus.Registers.X86] = ...
            EBX: ClassVar[CorePrStatus.Registers.X86] = ...
            ECX: ClassVar[CorePrStatus.Registers.X86] = ...
            EDI: ClassVar[CorePrStatus.Registers.X86] = ...
            EDX: ClassVar[CorePrStatus.Registers.X86] = ...
            EFLAGS: ClassVar[CorePrStatus.Registers.X86] = ...
            EIP: ClassVar[CorePrStatus.Registers.X86] = ...
            ES: ClassVar[CorePrStatus.Registers.X86] = ...
            ESI: ClassVar[CorePrStatus.Registers.X86] = ...
            ESP: ClassVar[CorePrStatus.Registers.X86] = ...
            FS: ClassVar[CorePrStatus.Registers.X86] = ...
            GS: ClassVar[CorePrStatus.Registers.X86] = ...
            ORIG_EAX: ClassVar[CorePrStatus.Registers.X86] = ...
            SS: ClassVar[CorePrStatus.Registers.X86] = ...
            __name__: str
            def __init__(self, *args, **kwargs) -> None: ...
            @staticmethod
            def from_value(arg: int, /) -> lief.ELF.CorePrStatus.Registers.X86: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __le__(self, other) -> bool: ...
            def __lt__(self, other) -> bool: ...
            @property
            def value(self) -> int: ...
    
        class X86_64:
            CS: ClassVar[CorePrStatus.Registers.X86_64] = ...
            EFLAGS: ClassVar[CorePrStatus.Registers.X86_64] = ...
            ORIG_RAX: ClassVar[CorePrStatus.Registers.X86_64] = ...
            R10: ClassVar[CorePrStatus.Registers.X86_64] = ...
            R11: ClassVar[CorePrStatus.Registers.X86_64] = ...
            R12: ClassVar[CorePrStatus.Registers.X86_64] = ...
            R13: ClassVar[CorePrStatus.Registers.X86_64] = ...
            R14: ClassVar[CorePrStatus.Registers.X86_64] = ...
            R15: ClassVar[CorePrStatus.Registers.X86_64] = ...
            R8: ClassVar[CorePrStatus.Registers.X86_64] = ...
            R9: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RAX: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RBP: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RBX: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RCX: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RDI: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RDX: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RIP: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RSI: ClassVar[CorePrStatus.Registers.X86_64] = ...
            RSP: ClassVar[CorePrStatus.Registers.X86_64] = ...
            SS: ClassVar[CorePrStatus.Registers.X86_64] = ...
            __name__: str
            def __init__(self, *args, **kwargs) -> None: ...
            @staticmethod
            def from_value(arg: int, /) -> lief.ELF.CorePrStatus.Registers.X86_64: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __le__(self, other) -> bool: ...
            def __lt__(self, other) -> bool: ...
            @property
            def value(self) -> int: ...
        def __init__(self, *args, **kwargs) -> None: ...

    class pr_status_t:
        cstime: lief.ELF.CorePrStatus.timeval_t  # type: ignore
        cursig: int
        cutime: lief.ELF.CorePrStatus.timeval_t  # type: ignore
        info: lief.ELF.CorePrStatus.siginfo_t  # type: ignore
        pgrp: int
        pid: int
        ppid: int
        reserved: int
        sid: int
        sighold: int
        sigpend: int
        stime: lief.ELF.CorePrStatus.timeval_t  # type: ignore
        utime: lief.ELF.CorePrStatus.timeval_t  # type: ignore
        def __init__(self, *args, **kwargs) -> None: ...

    class siginfo_t:
        errno: int
        sicode: int
        signo: int
        def __init__(self, *args, **kwargs) -> None: ...

    class timeval_t:
        sec: int
        usec: int
        def __init__(self, *args, **kwargs) -> None: ...
    status: lief.ELF.CorePrStatus.pr_status_t
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def get(self, reg: lief.ELF.CorePrStatus.Registers.X86) -> Optional[int]: ...
    @overload
    def get(self, reg: lief.ELF.CorePrStatus.Registers.X86_64) -> Optional[int]: ...
    @overload
    def get(self, reg: lief.ELF.CorePrStatus.Registers.ARM) -> Optional[int]: ...
    @overload
    def get(self, reg: lief.ELF.CorePrStatus.Registers.AARCH64) -> Optional[int]: ...
    @overload
    def set(self, reg: lief.ELF.CorePrStatus.Registers.X86, value: int) -> lief.ok_error_t: ...
    @overload
    def set(self, reg: lief.ELF.CorePrStatus.Registers.X86_64, value: int) -> lief.ok_error_t: ...
    @overload
    def set(self, reg: lief.ELF.CorePrStatus.Registers.ARM, value: int) -> lief.ok_error_t: ...
    @overload
    def set(self, reg: lief.ELF.CorePrStatus.Registers.AARCH64, value: int) -> lief.ok_error_t: ...
    @overload
    def __getitem__(self, arg: lief.ELF.CorePrStatus.Registers.X86, /) -> Optional[int]: ...
    @overload
    def __getitem__(self, arg: lief.ELF.CorePrStatus.Registers.X86_64, /) -> Optional[int]: ...
    @overload
    def __getitem__(self, arg: lief.ELF.CorePrStatus.Registers.ARM, /) -> Optional[int]: ...
    @overload
    def __getitem__(self, arg: lief.ELF.CorePrStatus.Registers.AARCH64, /) -> Optional[int]: ...
    @overload
    def __setitem__(self, arg0: lief.ELF.CorePrStatus.Registers.X86, arg1: int, /) -> lief.ok_error_t: ...
    @overload
    def __setitem__(self, arg0: lief.ELF.CorePrStatus.Registers.X86_64, arg1: int, /) -> lief.ok_error_t: ...
    @overload
    def __setitem__(self, arg0: lief.ELF.CorePrStatus.Registers.ARM, arg1: int, /) -> lief.ok_error_t: ...
    @overload
    def __setitem__(self, arg0: lief.ELF.CorePrStatus.Registers.AARCH64, arg1: int, /) -> lief.ok_error_t: ...
    @property
    def architecture(self) -> lief.ELF.ARCH: ...
    @property
    def pc(self) -> Optional[int]: ...
    @property
    def register_values(self) -> list[int]: ...
    @property
    def return_value(self) -> Optional[int]: ...
    @property
    def sp(self) -> Optional[int]: ...

class CoreSigInfo(Note):
    sigcode: Optional[int]
    sigerrno: Optional[int]
    signo: Optional[int]
    def __init__(self, *args, **kwargs) -> None: ...

class DYNAMIC_FLAGS:
    BIND_NOW: ClassVar[DYNAMIC_FLAGS] = ...
    ORIGIN: ClassVar[DYNAMIC_FLAGS] = ...
    STATIC_TLS: ClassVar[DYNAMIC_FLAGS] = ...
    SYMBOLIC: ClassVar[DYNAMIC_FLAGS] = ...
    TEXTREL: ClassVar[DYNAMIC_FLAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.DYNAMIC_FLAGS: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.DYNAMIC_FLAGS, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.DYNAMIC_FLAGS, /) -> lief.ELF.DYNAMIC_FLAGS: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.DYNAMIC_FLAGS, /) -> int: ...
    @property
    def value(self) -> int: ...

class DYNAMIC_FLAGS_1:
    CONFALT: ClassVar[DYNAMIC_FLAGS_1] = ...
    DIRECT: ClassVar[DYNAMIC_FLAGS_1] = ...
    DISPRELDNE: ClassVar[DYNAMIC_FLAGS_1] = ...
    DISPRELPND: ClassVar[DYNAMIC_FLAGS_1] = ...
    EDITED: ClassVar[DYNAMIC_FLAGS_1] = ...
    ENDFILTEE: ClassVar[DYNAMIC_FLAGS_1] = ...
    GLOBAL: ClassVar[DYNAMIC_FLAGS_1] = ...
    GLOBAUDIT: ClassVar[DYNAMIC_FLAGS_1] = ...
    GROUP: ClassVar[DYNAMIC_FLAGS_1] = ...
    IGNMULDEF: ClassVar[DYNAMIC_FLAGS_1] = ...
    INITFIRST: ClassVar[DYNAMIC_FLAGS_1] = ...
    INTERPOSE: ClassVar[DYNAMIC_FLAGS_1] = ...
    LOADFLTR: ClassVar[DYNAMIC_FLAGS_1] = ...
    NODEFLIB: ClassVar[DYNAMIC_FLAGS_1] = ...
    NODELETE: ClassVar[DYNAMIC_FLAGS_1] = ...
    NODIRECT: ClassVar[DYNAMIC_FLAGS_1] = ...
    NODUMP: ClassVar[DYNAMIC_FLAGS_1] = ...
    NOHDR: ClassVar[DYNAMIC_FLAGS_1] = ...
    NOKSYMS: ClassVar[DYNAMIC_FLAGS_1] = ...
    NOOPEN: ClassVar[DYNAMIC_FLAGS_1] = ...
    NORELOC: ClassVar[DYNAMIC_FLAGS_1] = ...
    NOW: ClassVar[DYNAMIC_FLAGS_1] = ...
    ORIGIN: ClassVar[DYNAMIC_FLAGS_1] = ...
    PIE: ClassVar[DYNAMIC_FLAGS_1] = ...
    SINGLETON: ClassVar[DYNAMIC_FLAGS_1] = ...
    SYMINTPOSE: ClassVar[DYNAMIC_FLAGS_1] = ...
    TRANS: ClassVar[DYNAMIC_FLAGS_1] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.DYNAMIC_FLAGS_1: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.DYNAMIC_FLAGS_1, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.DYNAMIC_FLAGS_1, /) -> lief.ELF.DYNAMIC_FLAGS_1: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.DYNAMIC_FLAGS_1, /) -> int: ...
    @property
    def value(self) -> int: ...

class DYNAMIC_TAGS:
    ANDROID_REL: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_RELA: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_RELASZ: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_RELR: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_RELRCOUNT: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_RELRENT: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_RELRSZ: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_RELSZ: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_REL_OFFSET: ClassVar[DYNAMIC_TAGS] = ...
    ANDROID_REL_SIZE: ClassVar[DYNAMIC_TAGS] = ...
    BIND_NOW: ClassVar[DYNAMIC_TAGS] = ...
    DEBUG: ClassVar[DYNAMIC_TAGS] = ...
    FINI: ClassVar[DYNAMIC_TAGS] = ...
    FINI_ARRAY: ClassVar[DYNAMIC_TAGS] = ...
    FINI_ARRAYSZ: ClassVar[DYNAMIC_TAGS] = ...
    FLAGS: ClassVar[DYNAMIC_TAGS] = ...
    FLAGS_1: ClassVar[DYNAMIC_TAGS] = ...
    GNU_HASH: ClassVar[DYNAMIC_TAGS] = ...
    HASH: ClassVar[DYNAMIC_TAGS] = ...
    INIT: ClassVar[DYNAMIC_TAGS] = ...
    INIT_ARRAY: ClassVar[DYNAMIC_TAGS] = ...
    INIT_ARRAYSZ: ClassVar[DYNAMIC_TAGS] = ...
    JMPREL: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_AUX_DYNAMIC: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_BASE_ADDRESS: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_COMPACT_SIZE: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_CONFLICT: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_CONFLICTNO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_CXX_FLAGS: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_CLASS: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_CLASSSYM: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_CLASSSYM_NO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_CLASS_NO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_INSTANCE: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_INSTANCE_NO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_RELOC: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_RELOC_NO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_SYM: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DELTA_SYM_NO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_DYNSTR_ALIGN: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_FLAGS: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_GOTSYM: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_GP_VALUE: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_HIDDEN_GOTIDX: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_HIPAGENO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_ICHECKSUM: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_INTERFACE: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_INTERFACE_SIZE: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_IVERSION: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_LIBLIST: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_LIBLISTNO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_LOCALPAGE_GOTIDX: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_LOCAL_GOTIDX: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_LOCAL_GOTNO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_MSYM: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_OPTIONS: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_PERF_SUFFIX: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_PIXIE_INIT: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_PLTGOT: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_PROTECTED_GOTIDX: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_RLD_MAP: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_RLD_TEXT_RESOLVE_ADDR: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_RLD_VERSION: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_RWPLT: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_SYMBOL_LIB: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_SYMTABNO: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_TIME_STAMP: ClassVar[DYNAMIC_TAGS] = ...
    MIPS_UNREFEXTNO: ClassVar[DYNAMIC_TAGS] = ...
    NEEDED: ClassVar[DYNAMIC_TAGS] = ...
    NULL: ClassVar[DYNAMIC_TAGS] = ...
    PLTGOT: ClassVar[DYNAMIC_TAGS] = ...
    PLTREL: ClassVar[DYNAMIC_TAGS] = ...
    PLTRELSZ: ClassVar[DYNAMIC_TAGS] = ...
    PREINIT_ARRAY: ClassVar[DYNAMIC_TAGS] = ...
    PREINIT_ARRAYSZ: ClassVar[DYNAMIC_TAGS] = ...
    REL: ClassVar[DYNAMIC_TAGS] = ...
    RELA: ClassVar[DYNAMIC_TAGS] = ...
    RELACOUNT: ClassVar[DYNAMIC_TAGS] = ...
    RELAENT: ClassVar[DYNAMIC_TAGS] = ...
    RELASZ: ClassVar[DYNAMIC_TAGS] = ...
    RELCOUNT: ClassVar[DYNAMIC_TAGS] = ...
    RELENT: ClassVar[DYNAMIC_TAGS] = ...
    RELR: ClassVar[DYNAMIC_TAGS] = ...
    RELRENT: ClassVar[DYNAMIC_TAGS] = ...
    RELRSZ: ClassVar[DYNAMIC_TAGS] = ...
    RELSZ: ClassVar[DYNAMIC_TAGS] = ...
    RPATH: ClassVar[DYNAMIC_TAGS] = ...
    RUNPATH: ClassVar[DYNAMIC_TAGS] = ...
    SONAME: ClassVar[DYNAMIC_TAGS] = ...
    STRSZ: ClassVar[DYNAMIC_TAGS] = ...
    STRTAB: ClassVar[DYNAMIC_TAGS] = ...
    SYMBOLIC: ClassVar[DYNAMIC_TAGS] = ...
    SYMENT: ClassVar[DYNAMIC_TAGS] = ...
    SYMTAB: ClassVar[DYNAMIC_TAGS] = ...
    SYMTAB_SHNDX: ClassVar[DYNAMIC_TAGS] = ...
    TEXTREL: ClassVar[DYNAMIC_TAGS] = ...
    VERDEF: ClassVar[DYNAMIC_TAGS] = ...
    VERDEFNUM: ClassVar[DYNAMIC_TAGS] = ...
    VERNEED: ClassVar[DYNAMIC_TAGS] = ...
    VERNEEDNUM: ClassVar[DYNAMIC_TAGS] = ...
    VERSYM: ClassVar[DYNAMIC_TAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.DYNAMIC_TAGS: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class DYNSYM_COUNT_METHODS:
    AUTO: ClassVar[DYNSYM_COUNT_METHODS] = ...
    HASH: ClassVar[DYNSYM_COUNT_METHODS] = ...
    RELOCATIONS: ClassVar[DYNSYM_COUNT_METHODS] = ...
    SECTION: ClassVar[DYNSYM_COUNT_METHODS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.DYNSYM_COUNT_METHODS: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class DynamicEntry(lief.Object):
    tag: lief.ELF.DYNAMIC_TAGS
    value: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tag: lief.ELF.DYNAMIC_TAGS, value: int) -> None: ...

class DynamicEntryArray(DynamicEntry):
    array: list[int]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tag: lief.ELF.DYNAMIC_TAGS, value: int) -> None: ...
    def append(self, function: int) -> lief.ELF.DynamicEntryArray: ...
    def insert(self, pos: int, function: int) -> lief.ELF.DynamicEntryArray: ...
    def remove(self, function: int) -> lief.ELF.DynamicEntryArray: ...
    def __getitem__(self, arg: int, /) -> int: ...
    def __iadd__(self, arg: int, /) -> lief.ELF.DynamicEntryArray: ...
    def __isub__(self, arg: int, /) -> lief.ELF.DynamicEntryArray: ...
    def __len__(self) -> int: ...

class DynamicEntryFlags(DynamicEntry):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tag: lief.ELF.DYNAMIC_TAGS, value: int) -> None: ...
    @overload
    def add(self, flag: lief.ELF.DYNAMIC_FLAGS) -> None: ...
    @overload
    def add(self, flag: lief.ELF.DYNAMIC_FLAGS_1) -> None: ...
    @overload
    def has(self, flag: lief.ELF.DYNAMIC_FLAGS) -> bool: ...
    @overload
    def has(self, flag: lief.ELF.DYNAMIC_FLAGS_1) -> bool: ...
    @overload
    def remove(self, flag: lief.ELF.DYNAMIC_FLAGS) -> None: ...
    @overload
    def remove(self, flag: lief.ELF.DYNAMIC_FLAGS_1) -> None: ...
    @overload
    def __contains__(self, arg: lief.ELF.DYNAMIC_FLAGS, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.DYNAMIC_FLAGS_1, /) -> bool: ...
    @overload
    def __iadd__(self, arg: lief.ELF.DYNAMIC_FLAGS, /) -> lief.ELF.DynamicEntryFlags: ...
    @overload
    def __iadd__(self, arg: lief.ELF.DYNAMIC_FLAGS_1, /) -> lief.ELF.DynamicEntryFlags: ...
    @overload
    def __isub__(self, arg: lief.ELF.DYNAMIC_FLAGS, /) -> lief.ELF.DynamicEntryFlags: ...
    @overload
    def __isub__(self, arg: lief.ELF.DYNAMIC_FLAGS_1, /) -> lief.ELF.DynamicEntryFlags: ...
    @property
    def flags(self) -> set[int]: ...

class DynamicEntryLibrary(DynamicEntry):
    name: Union[str,bytes]
    def __init__(self, library_name: str) -> None: ...

class DynamicEntryRpath(DynamicEntry):
    name: Union[str,bytes]
    paths: list[str]
    rpath: Union[str,bytes]
    @overload
    def __init__(self, path: str = ...) -> None: ...
    @overload
    def __init__(self, paths: list[str]) -> None: ...
    def append(self, path: str) -> lief.ELF.DynamicEntryRpath: ...
    def insert(self, position: int, path: str) -> lief.ELF.DynamicEntryRpath: ...
    def remove(self, path: str) -> lief.ELF.DynamicEntryRpath: ...
    def __iadd__(self, arg: str, /) -> lief.ELF.DynamicEntryRpath: ...
    def __isub__(self, arg: str, /) -> lief.ELF.DynamicEntryRpath: ...

class DynamicEntryRunPath(DynamicEntry):
    name: Union[str,bytes]
    paths: list[str]
    runpath: Union[str,bytes]
    @overload
    def __init__(self, path: str = ...) -> None: ...
    @overload
    def __init__(self, paths: list[str]) -> None: ...
    def append(self, path: str) -> lief.ELF.DynamicEntryRunPath: ...
    def insert(self, position: int, path: str) -> lief.ELF.DynamicEntryRunPath: ...
    def remove(self, path: str) -> lief.ELF.DynamicEntryRunPath: ...
    def __iadd__(self, arg: str, /) -> lief.ELF.DynamicEntryRunPath: ...
    def __isub__(self, arg: str, /) -> lief.ELF.DynamicEntryRunPath: ...

class DynamicSharedObject(DynamicEntry):
    name: Union[str,bytes]
    def __init__(self, library_name: str) -> None: ...

class ELF_CLASS:
    CLASS32: ClassVar[ELF_CLASS] = ...
    CLASS64: ClassVar[ELF_CLASS] = ...
    NONE: ClassVar[ELF_CLASS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.ELF_CLASS: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class ELF_DATA:
    LSB: ClassVar[ELF_DATA] = ...
    MSB: ClassVar[ELF_DATA] = ...
    NONE: ClassVar[ELF_DATA] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.ELF_DATA: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class E_TYPE:
    CORE: ClassVar[E_TYPE] = ...
    DYNAMIC: ClassVar[E_TYPE] = ...
    EXECUTABLE: ClassVar[E_TYPE] = ...
    HIPROC: ClassVar[E_TYPE] = ...
    LOPROC: ClassVar[E_TYPE] = ...
    NONE: ClassVar[E_TYPE] = ...
    RELOCATABLE: ClassVar[E_TYPE] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.E_TYPE: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class Generic(NoteGnuProperty.Property):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def raw_type(self) -> int: ...

class GnuHash(lief.Object):
    def __init__(self) -> None: ...
    @overload
    def check(self, symbol_name: str) -> bool: ...
    @overload
    def check(self, hash_value: int) -> bool: ...
    def check_bloom_filter(self, hash: int) -> bool: ...
    def check_bucket(self, hash: int) -> bool: ...
    @property
    def bloom_filters(self) -> list[int]: ...
    @property
    def buckets(self) -> list[int]: ...
    @property
    def hash_values(self) -> list[int]: ...
    @property
    def nb_buckets(self) -> int: ...
    @property
    def shift2(self) -> int: ...
    @property
    def symbol_index(self) -> int: ...

class HEXAGON_EFLAGS:
    ISA_MACH: ClassVar[HEXAGON_EFLAGS] = ...
    ISA_V2: ClassVar[HEXAGON_EFLAGS] = ...
    ISA_V3: ClassVar[HEXAGON_EFLAGS] = ...
    ISA_V4: ClassVar[HEXAGON_EFLAGS] = ...
    ISA_V5: ClassVar[HEXAGON_EFLAGS] = ...
    MACH_V2: ClassVar[HEXAGON_EFLAGS] = ...
    MACH_V3: ClassVar[HEXAGON_EFLAGS] = ...
    MACH_V4: ClassVar[HEXAGON_EFLAGS] = ...
    MACH_V5: ClassVar[HEXAGON_EFLAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.HEXAGON_EFLAGS: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.HEXAGON_EFLAGS, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.HEXAGON_EFLAGS, /) -> lief.ELF.HEXAGON_EFLAGS: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.HEXAGON_EFLAGS, /) -> int: ...
    @property
    def value(self) -> int: ...

class Header(lief.Object):
    entrypoint: int
    file_type: lief.ELF.E_TYPE
    header_size: int
    identity: list[int]
    identity_abi_version: int
    identity_class: lief.ELF.ELF_CLASS
    identity_data: lief.ELF.ELF_DATA
    identity_os_abi: lief.ELF.OS_ABI
    identity_version: lief.ELF.VERSION
    machine_type: lief.ELF.ARCH
    numberof_sections: int
    numberof_segments: int
    object_file_version: lief.ELF.VERSION
    processor_flag: int
    program_header_offset: int
    program_header_size: int
    section_header_offset: int
    section_header_size: int
    section_name_table_idx: int
    def __init__(self) -> None: ...
    @overload
    def __contains__(self, arg: lief.ELF.ARM_EFLAGS, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.MIPS_EFLAGS, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.PPC64_EFLAGS, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.HEXAGON_EFLAGS, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.LOONGARCH_EFLAGS, /) -> bool: ...
    @property
    def arm_flags_list(self) -> set[lief.ELF.ARM_EFLAGS]: ...
    @property
    def hexagon_flags_list(self) -> set[lief.ELF.HEXAGON_EFLAGS]: ...
    @property
    def loongarch_flags_list(self) -> set[lief.ELF.LOONGARCH_EFLAGS]: ...
    @property
    def mips_flags_list(self) -> set[lief.ELF.MIPS_EFLAGS]: ...
    @property
    def ppc64_flags_list(self) -> set[lief.ELF.PPC64_EFLAGS]: ...

class IDENTITY:
    ABIVERSION: ClassVar[IDENTITY] = ...
    CLASS: ClassVar[IDENTITY] = ...
    DATA: ClassVar[IDENTITY] = ...
    MAG0: ClassVar[IDENTITY] = ...
    MAG1: ClassVar[IDENTITY] = ...
    MAG2: ClassVar[IDENTITY] = ...
    MAG3: ClassVar[IDENTITY] = ...
    NIDENT: ClassVar[IDENTITY] = ...
    OSABI: ClassVar[IDENTITY] = ...
    PAD: ClassVar[IDENTITY] = ...
    VERSION: ClassVar[IDENTITY] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.IDENTITY: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class LOONGARCH_EFLAGS:
    ABI_DOUBLE_FLOAT: ClassVar[LOONGARCH_EFLAGS] = ...
    ABI_SINGLE_FLOAT: ClassVar[LOONGARCH_EFLAGS] = ...
    ABI_SOFT_FLOAT: ClassVar[LOONGARCH_EFLAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.LOONGARCH_EFLAGS: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.LOONGARCH_EFLAGS, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.LOONGARCH_EFLAGS, /) -> lief.ELF.LOONGARCH_EFLAGS: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.LOONGARCH_EFLAGS, /) -> int: ...
    @property
    def value(self) -> int: ...

class MIPS_EFLAGS:
    ABI2: ClassVar[MIPS_EFLAGS] = ...
    ABI_EABI32: ClassVar[MIPS_EFLAGS] = ...
    ABI_EABI64: ClassVar[MIPS_EFLAGS] = ...
    ABI_O32: ClassVar[MIPS_EFLAGS] = ...
    ABI_O64: ClassVar[MIPS_EFLAGS] = ...
    ARCH_1: ClassVar[MIPS_EFLAGS] = ...
    ARCH_2: ClassVar[MIPS_EFLAGS] = ...
    ARCH_3: ClassVar[MIPS_EFLAGS] = ...
    ARCH_32: ClassVar[MIPS_EFLAGS] = ...
    ARCH_32R2: ClassVar[MIPS_EFLAGS] = ...
    ARCH_32R6: ClassVar[MIPS_EFLAGS] = ...
    ARCH_4: ClassVar[MIPS_EFLAGS] = ...
    ARCH_5: ClassVar[MIPS_EFLAGS] = ...
    ARCH_64: ClassVar[MIPS_EFLAGS] = ...
    ARCH_64R2: ClassVar[MIPS_EFLAGS] = ...
    ARCH_64R6: ClassVar[MIPS_EFLAGS] = ...
    ARCH_ASE_M16: ClassVar[MIPS_EFLAGS] = ...
    ARCH_ASE_MDMX: ClassVar[MIPS_EFLAGS] = ...
    CPIC: ClassVar[MIPS_EFLAGS] = ...
    FP64: ClassVar[MIPS_EFLAGS] = ...
    MACH_3900: ClassVar[MIPS_EFLAGS] = ...
    MACH_4010: ClassVar[MIPS_EFLAGS] = ...
    MACH_4100: ClassVar[MIPS_EFLAGS] = ...
    MACH_4111: ClassVar[MIPS_EFLAGS] = ...
    MACH_4120: ClassVar[MIPS_EFLAGS] = ...
    MACH_4650: ClassVar[MIPS_EFLAGS] = ...
    MACH_5400: ClassVar[MIPS_EFLAGS] = ...
    MACH_5500: ClassVar[MIPS_EFLAGS] = ...
    MACH_5900: ClassVar[MIPS_EFLAGS] = ...
    MACH_9000: ClassVar[MIPS_EFLAGS] = ...
    MACH_LS2E: ClassVar[MIPS_EFLAGS] = ...
    MACH_LS2F: ClassVar[MIPS_EFLAGS] = ...
    MACH_LS3A: ClassVar[MIPS_EFLAGS] = ...
    MACH_OCTEON: ClassVar[MIPS_EFLAGS] = ...
    MACH_OCTEON2: ClassVar[MIPS_EFLAGS] = ...
    MACH_OCTEON3: ClassVar[MIPS_EFLAGS] = ...
    MACH_SB1: ClassVar[MIPS_EFLAGS] = ...
    MACH_XLR: ClassVar[MIPS_EFLAGS] = ...
    MICROMIPS: ClassVar[MIPS_EFLAGS] = ...
    NAN2008: ClassVar[MIPS_EFLAGS] = ...
    NOREORDER: ClassVar[MIPS_EFLAGS] = ...
    PIC: ClassVar[MIPS_EFLAGS] = ...
    _32BITMODE: ClassVar[MIPS_EFLAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.MIPS_EFLAGS: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.MIPS_EFLAGS, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.MIPS_EFLAGS, /) -> lief.ELF.MIPS_EFLAGS: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.MIPS_EFLAGS, /) -> int: ...
    @property
    def value(self) -> int: ...

class Note(lief.Object):
    class TYPE:
        ANDROID_IDENT: ClassVar[Note.TYPE] = ...
        ANDROID_KUSER: ClassVar[Note.TYPE] = ...
        ANDROID_MEMTAG: ClassVar[Note.TYPE] = ...
        CORE_ARM_HW_BREAK: ClassVar[Note.TYPE] = ...
        CORE_ARM_HW_WATCH: ClassVar[Note.TYPE] = ...
        CORE_ARM_PACA_KEYS: ClassVar[Note.TYPE] = ...
        CORE_ARM_PACG_KEYS: ClassVar[Note.TYPE] = ...
        CORE_ARM_PAC_MASK: ClassVar[Note.TYPE] = ...
        CORE_ARM_SVE: ClassVar[Note.TYPE] = ...
        CORE_ARM_SYSTEM_CALL: ClassVar[Note.TYPE] = ...
        CORE_ARM_TLS: ClassVar[Note.TYPE] = ...
        CORE_ARM_VFP: ClassVar[Note.TYPE] = ...
        CORE_AUXV: ClassVar[Note.TYPE] = ...
        CORE_FILE: ClassVar[Note.TYPE] = ...
        CORE_FPREGS: ClassVar[Note.TYPE] = ...
        CORE_FPREGSET: ClassVar[Note.TYPE] = ...
        CORE_LWPSINFO: ClassVar[Note.TYPE] = ...
        CORE_LWPSTATUS: ClassVar[Note.TYPE] = ...
        CORE_PAC_ENABLED_KEYS: ClassVar[Note.TYPE] = ...
        CORE_PRPSINFO: ClassVar[Note.TYPE] = ...
        CORE_PRSTATUS: ClassVar[Note.TYPE] = ...
        CORE_PRXFPREG: ClassVar[Note.TYPE] = ...
        CORE_PSINFO: ClassVar[Note.TYPE] = ...
        CORE_PSTATUS: ClassVar[Note.TYPE] = ...
        CORE_SIGINFO: ClassVar[Note.TYPE] = ...
        CORE_TAGGED_ADDR_CTRL: ClassVar[Note.TYPE] = ...
        CORE_TASKSTRUCT: ClassVar[Note.TYPE] = ...
        CORE_WIN32PSTATUS: ClassVar[Note.TYPE] = ...
        CORE_X86_CET: ClassVar[Note.TYPE] = ...
        CORE_X86_IOPERM: ClassVar[Note.TYPE] = ...
        CORE_X86_TLS: ClassVar[Note.TYPE] = ...
        CORE_X86_XSTATE: ClassVar[Note.TYPE] = ...
        CRASHPAD: ClassVar[Note.TYPE] = ...
        GNU_ABI_TAG: ClassVar[Note.TYPE] = ...
        GNU_BUILD_ATTRIBUTE_FUNC: ClassVar[Note.TYPE] = ...
        GNU_BUILD_ATTRIBUTE_OPEN: ClassVar[Note.TYPE] = ...
        GNU_BUILD_ID: ClassVar[Note.TYPE] = ...
        GNU_GOLD_VERSION: ClassVar[Note.TYPE] = ...
        GNU_HWCAP: ClassVar[Note.TYPE] = ...
        GNU_PROPERTY_TYPE_0: ClassVar[Note.TYPE] = ...
        GO_BUILDID: ClassVar[Note.TYPE] = ...
        STAPSDT: ClassVar[Note.TYPE] = ...
        UNKNOWN: ClassVar[Note.TYPE] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def from_value(arg: int, /) -> lief.ELF.Note.TYPE: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        @property
        def value(self) -> int: ...
    description: memoryview
    name: str
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self) -> Optional[lief.ELF.Note]: ...
    @overload
    @staticmethod
    def create(name: str, original_type: int, description: list[int], file_type: lief.ELF.E_TYPE = ..., arch: lief.ELF.ARCH = ..., cls: lief.ELF.ELF_CLASS = ...) -> Optional[lief.ELF.Note]: ...
    @overload
    @staticmethod
    def create(raw: bytes, file_type: lief.ELF.E_TYPE = ..., arch: lief.ELF.ARCH = ..., cls: lief.ELF.ELF_CLASS = ...) -> Optional[lief.ELF.Note]: ...
    @overload
    @staticmethod
    def create(name: str, type: lief.ELF.Note.TYPE, description: list[int], arch: lief.ELF.ARCH = ..., cls: lief.ELF.ELF_CLASS = ...) -> Optional[lief.ELF.Note]: ...
    @property
    def original_type(self) -> int: ...
    @property
    def size(self) -> int: ...
    @property
    def type(self) -> lief.ELF.Note.TYPE: ...

class NoteAbi(Note):
    class ABI:
        FREEBSD: ClassVar[NoteAbi.ABI] = ...
        GNU: ClassVar[NoteAbi.ABI] = ...
        LINUX: ClassVar[NoteAbi.ABI] = ...
        NACL: ClassVar[NoteAbi.ABI] = ...
        NETBSD: ClassVar[NoteAbi.ABI] = ...
        SOLARIS2: ClassVar[NoteAbi.ABI] = ...
        SYLLABLE: ClassVar[NoteAbi.ABI] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def from_value(arg: int, /) -> lief.ELF.NoteAbi.ABI: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def abi(self) -> Optional[lief.ELF.NoteAbi.ABI]: ...
    @property
    def version(self) -> Optional[list[int]]: ...

class NoteGnuProperty(Note):
    class Property:
        class TYPE:
            AARCH64_FEATURES: ClassVar[NoteGnuProperty.Property.TYPE] = ...
            GENERIC: ClassVar[NoteGnuProperty.Property.TYPE] = ...
            NEEDED: ClassVar[NoteGnuProperty.Property.TYPE] = ...
            NO_COPY_ON_PROTECTED: ClassVar[NoteGnuProperty.Property.TYPE] = ...
            STACK_SIZE: ClassVar[NoteGnuProperty.Property.TYPE] = ...
            UNKNOWN: ClassVar[NoteGnuProperty.Property.TYPE] = ...
            X86_FEATURE: ClassVar[NoteGnuProperty.Property.TYPE] = ...
            X86_ISA: ClassVar[NoteGnuProperty.Property.TYPE] = ...
            __name__: str
            def __init__(self, *args, **kwargs) -> None: ...
            @staticmethod
            def from_value(arg: int, /) -> lief.ELF.NoteGnuProperty.Property.TYPE: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __le__(self, other) -> bool: ...
            def __lt__(self, other) -> bool: ...
            @property
            def value(self) -> int: ...
        def __init__(self, *args, **kwargs) -> None: ...
        @property
        def type(self) -> lief.ELF.NoteGnuProperty.Property.TYPE: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def find(self, arg: lief.ELF.NoteGnuProperty.Property.TYPE, /) -> Optional[lief.ELF.NoteGnuProperty.Property]: ...
    @property
    def properties(self) -> list[Optional[lief.ELF.NoteGnuProperty.Property]]: ...

class NoteNoCopyOnProtected(NoteGnuProperty.Property):
    def __init__(self, *args, **kwargs) -> None: ...

class OS_ABI:
    AIX: ClassVar[OS_ABI] = ...
    AMDGPU_HSA: ClassVar[OS_ABI] = ...
    ARM: ClassVar[OS_ABI] = ...
    AROS: ClassVar[OS_ABI] = ...
    C6000_ELFABI: ClassVar[OS_ABI] = ...
    C6000_LINUX: ClassVar[OS_ABI] = ...
    CLOUDABI: ClassVar[OS_ABI] = ...
    FENIXOS: ClassVar[OS_ABI] = ...
    FREEBSD: ClassVar[OS_ABI] = ...
    GNU: ClassVar[OS_ABI] = ...
    HPUX: ClassVar[OS_ABI] = ...
    HURD: ClassVar[OS_ABI] = ...
    IRIX: ClassVar[OS_ABI] = ...
    LINUX: ClassVar[OS_ABI] = ...
    MODESTO: ClassVar[OS_ABI] = ...
    NETBSD: ClassVar[OS_ABI] = ...
    NSK: ClassVar[OS_ABI] = ...
    OPENBSD: ClassVar[OS_ABI] = ...
    OPENVMS: ClassVar[OS_ABI] = ...
    SOLARIS: ClassVar[OS_ABI] = ...
    STANDALONE: ClassVar[OS_ABI] = ...
    SYSTEMV: ClassVar[OS_ABI] = ...
    TRU64: ClassVar[OS_ABI] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.OS_ABI: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class PPC64_EFLAGS:
    ABI: ClassVar[PPC64_EFLAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.PPC64_EFLAGS: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.PPC64_EFLAGS, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.PPC64_EFLAGS, /) -> lief.ELF.PPC64_EFLAGS: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.PPC64_EFLAGS, /) -> int: ...
    @property
    def value(self) -> int: ...

class ParserConfig:
    count_mtd: lief.ELF.DYNSYM_COUNT_METHODS
    parse_dyn_symbols: bool
    parse_notes: bool
    parse_overlay: bool
    parse_relocations: bool
    parse_static_symbols: bool
    parse_symbol_versions: bool
    def __init__(self) -> None: ...
    @property
    def all(self) -> lief.ELF.ParserConfig: ...

class RELOCATION_AARCH64:
    ABS16: ClassVar[RELOCATION_AARCH64] = ...
    ABS32: ClassVar[RELOCATION_AARCH64] = ...
    ABS64: ClassVar[RELOCATION_AARCH64] = ...
    ADD_ABS_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    ADR_GOT_PAGE: ClassVar[RELOCATION_AARCH64] = ...
    ADR_PREL_LO21: ClassVar[RELOCATION_AARCH64] = ...
    ADR_PREL_PG_HI21: ClassVar[RELOCATION_AARCH64] = ...
    ADR_PREL_PG_HI21_NC: ClassVar[RELOCATION_AARCH64] = ...
    CALL26: ClassVar[RELOCATION_AARCH64] = ...
    CONDBR19: ClassVar[RELOCATION_AARCH64] = ...
    COPY: ClassVar[RELOCATION_AARCH64] = ...
    GLOB_DAT: ClassVar[RELOCATION_AARCH64] = ...
    GOTREL32: ClassVar[RELOCATION_AARCH64] = ...
    GOTREL64: ClassVar[RELOCATION_AARCH64] = ...
    GOT_LD_PREL19: ClassVar[RELOCATION_AARCH64] = ...
    IRELATIVE: ClassVar[RELOCATION_AARCH64] = ...
    JUMP26: ClassVar[RELOCATION_AARCH64] = ...
    JUMP_SLOT: ClassVar[RELOCATION_AARCH64] = ...
    LD64_GOTOFF_LO15: ClassVar[RELOCATION_AARCH64] = ...
    LD64_GOTPAGE_LO15: ClassVar[RELOCATION_AARCH64] = ...
    LD64_GOT_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    LDST128_ABS_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    LDST16_ABS_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    LDST32_ABS_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    LDST64_ABS_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    LDST8_ABS_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    LD_PREL_LO19: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_GOTOFF_G0: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_GOTOFF_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_GOTOFF_G1: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_GOTOFF_G1_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_GOTOFF_G2: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_GOTOFF_G2_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_GOTOFF_G3: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_PREL_G0: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_PREL_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_PREL_G1: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_PREL_G1_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_PREL_G2: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_PREL_G2_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_PREL_G3: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_SABS_G0: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_SABS_G1: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_SABS_G2: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_UABS_G0: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_UABS_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_UABS_G1: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_UABS_G1_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_UABS_G2: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_UABS_G2_NC: ClassVar[RELOCATION_AARCH64] = ...
    MOVW_UABS_G3: ClassVar[RELOCATION_AARCH64] = ...
    NONE: ClassVar[RELOCATION_AARCH64] = ...
    PREL16: ClassVar[RELOCATION_AARCH64] = ...
    PREL32: ClassVar[RELOCATION_AARCH64] = ...
    PREL64: ClassVar[RELOCATION_AARCH64] = ...
    RELATIVE: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_ADD: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_ADD_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_ADR_PAGE21: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_ADR_PREL21: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_CALL: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_LD64_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_LDR: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_LD_PREL19: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_OFF_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSDESC_OFF_G1: ClassVar[RELOCATION_AARCH64] = ...
    TLSGD_ADD_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSGD_ADR_PAGE21: ClassVar[RELOCATION_AARCH64] = ...
    TLSGD_ADR_PREL21: ClassVar[RELOCATION_AARCH64] = ...
    TLSGD_MOVW_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSGD_MOVW_G1: ClassVar[RELOCATION_AARCH64] = ...
    TLSIE_ADR_GOTTPREL_PAGE21: ClassVar[RELOCATION_AARCH64] = ...
    TLSIE_LD64_GOTTPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSIE_LD_GOTTPREL_PREL19: ClassVar[RELOCATION_AARCH64] = ...
    TLSIE_MOVW_GOTTPREL_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSIE_MOVW_GOTTPREL_G1: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_ADD_DTPREL_HI12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_ADD_DTPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_ADD_DTPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_ADD_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_ADR_PAGE21: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_ADR_PREL21: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST128_DTPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST128_DTPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST16_DTPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST16_DTPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST32_DTPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST32_DTPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST64_DTPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST64_DTPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST8_DTPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LDST8_DTPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_LD_PREL19: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_MOVW_DTPREL_G0: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_MOVW_DTPREL_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_MOVW_DTPREL_G1: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_MOVW_DTPREL_G1_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_MOVW_DTPREL_G2: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_MOVW_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLD_MOVW_G1: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_ADD_TPREL_HI12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_ADD_TPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_ADD_TPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST128_TPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST128_TPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST16_TPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST16_TPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST32_TPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST32_TPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST64_TPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST64_TPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST8_TPREL_LO12: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_LDST8_TPREL_LO12_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_MOVW_TPREL_G0: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_MOVW_TPREL_G0_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_MOVW_TPREL_G1: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_MOVW_TPREL_G1_NC: ClassVar[RELOCATION_AARCH64] = ...
    TLSLE_MOVW_TPREL_G2: ClassVar[RELOCATION_AARCH64] = ...
    TLS_DTPMOD64: ClassVar[RELOCATION_AARCH64] = ...
    TLS_DTPREL64: ClassVar[RELOCATION_AARCH64] = ...
    TLS_TPREL64: ClassVar[RELOCATION_AARCH64] = ...
    TSTBR14: ClassVar[RELOCATION_AARCH64] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_AARCH64: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class RELOCATION_ARM:
    ABS12: ClassVar[RELOCATION_ARM] = ...
    ABS16: ClassVar[RELOCATION_ARM] = ...
    ABS32: ClassVar[RELOCATION_ARM] = ...
    ABS32_NOI: ClassVar[RELOCATION_ARM] = ...
    ABS8: ClassVar[RELOCATION_ARM] = ...
    ALU_PCREL_15_8: ClassVar[RELOCATION_ARM] = ...
    ALU_PCREL_23_15: ClassVar[RELOCATION_ARM] = ...
    ALU_PCREL_7_0: ClassVar[RELOCATION_ARM] = ...
    ALU_PC_G0: ClassVar[RELOCATION_ARM] = ...
    ALU_PC_G0_NC: ClassVar[RELOCATION_ARM] = ...
    ALU_PC_G1: ClassVar[RELOCATION_ARM] = ...
    ALU_PC_G1_NC: ClassVar[RELOCATION_ARM] = ...
    ALU_PC_G2: ClassVar[RELOCATION_ARM] = ...
    ALU_SBREL_19_12_NC: ClassVar[RELOCATION_ARM] = ...
    ALU_SBREL_27_20_CK: ClassVar[RELOCATION_ARM] = ...
    ALU_SB_G0: ClassVar[RELOCATION_ARM] = ...
    ALU_SB_G0_NC: ClassVar[RELOCATION_ARM] = ...
    ALU_SB_G1: ClassVar[RELOCATION_ARM] = ...
    ALU_SB_G1_NC: ClassVar[RELOCATION_ARM] = ...
    ALU_SB_G2: ClassVar[RELOCATION_ARM] = ...
    BASE_ABS: ClassVar[RELOCATION_ARM] = ...
    BASE_PREL: ClassVar[RELOCATION_ARM] = ...
    BREL_ADJ: ClassVar[RELOCATION_ARM] = ...
    CALL: ClassVar[RELOCATION_ARM] = ...
    COPY: ClassVar[RELOCATION_ARM] = ...
    GLOB_DAT: ClassVar[RELOCATION_ARM] = ...
    GNU_VTENTRY: ClassVar[RELOCATION_ARM] = ...
    GNU_VTINHERIT: ClassVar[RELOCATION_ARM] = ...
    GOTOFF12: ClassVar[RELOCATION_ARM] = ...
    GOTOFF32: ClassVar[RELOCATION_ARM] = ...
    GOTRELAX: ClassVar[RELOCATION_ARM] = ...
    GOT_ABS: ClassVar[RELOCATION_ARM] = ...
    GOT_BREL: ClassVar[RELOCATION_ARM] = ...
    GOT_BREL12: ClassVar[RELOCATION_ARM] = ...
    GOT_PREL: ClassVar[RELOCATION_ARM] = ...
    IRELATIVE: ClassVar[RELOCATION_ARM] = ...
    JUMP24: ClassVar[RELOCATION_ARM] = ...
    JUMP_SLOT: ClassVar[RELOCATION_ARM] = ...
    LDC_PC_G0: ClassVar[RELOCATION_ARM] = ...
    LDC_PC_G1: ClassVar[RELOCATION_ARM] = ...
    LDC_PC_G2: ClassVar[RELOCATION_ARM] = ...
    LDC_SB_G0: ClassVar[RELOCATION_ARM] = ...
    LDC_SB_G1: ClassVar[RELOCATION_ARM] = ...
    LDC_SB_G2: ClassVar[RELOCATION_ARM] = ...
    LDRS_PC_G0: ClassVar[RELOCATION_ARM] = ...
    LDRS_PC_G1: ClassVar[RELOCATION_ARM] = ...
    LDRS_PC_G2: ClassVar[RELOCATION_ARM] = ...
    LDRS_SB_G0: ClassVar[RELOCATION_ARM] = ...
    LDRS_SB_G1: ClassVar[RELOCATION_ARM] = ...
    LDRS_SB_G2: ClassVar[RELOCATION_ARM] = ...
    LDR_PC_G0: ClassVar[RELOCATION_ARM] = ...
    LDR_PC_G1: ClassVar[RELOCATION_ARM] = ...
    LDR_PC_G2: ClassVar[RELOCATION_ARM] = ...
    LDR_SBREL_11_0_NC: ClassVar[RELOCATION_ARM] = ...
    LDR_SB_G0: ClassVar[RELOCATION_ARM] = ...
    LDR_SB_G1: ClassVar[RELOCATION_ARM] = ...
    LDR_SB_G2: ClassVar[RELOCATION_ARM] = ...
    ME_TOO: ClassVar[RELOCATION_ARM] = ...
    MOVT_ABS: ClassVar[RELOCATION_ARM] = ...
    MOVT_BREL: ClassVar[RELOCATION_ARM] = ...
    MOVT_PREL: ClassVar[RELOCATION_ARM] = ...
    MOVW_ABS_NC: ClassVar[RELOCATION_ARM] = ...
    MOVW_BREL: ClassVar[RELOCATION_ARM] = ...
    MOVW_BREL_NC: ClassVar[RELOCATION_ARM] = ...
    MOVW_PREL_NC: ClassVar[RELOCATION_ARM] = ...
    NONE: ClassVar[RELOCATION_ARM] = ...
    PC24: ClassVar[RELOCATION_ARM] = ...
    PLT32: ClassVar[RELOCATION_ARM] = ...
    PLT32_ABS: ClassVar[RELOCATION_ARM] = ...
    PREL31: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_0: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_1: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_10: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_11: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_12: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_13: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_14: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_15: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_2: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_3: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_4: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_5: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_6: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_7: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_8: ClassVar[RELOCATION_ARM] = ...
    PRIVATE_9: ClassVar[RELOCATION_ARM] = ...
    RBASE: ClassVar[RELOCATION_ARM] = ...
    REL32: ClassVar[RELOCATION_ARM] = ...
    REL32_NOI: ClassVar[RELOCATION_ARM] = ...
    RELATIVE: ClassVar[RELOCATION_ARM] = ...
    RPC24: ClassVar[RELOCATION_ARM] = ...
    RREL32: ClassVar[RELOCATION_ARM] = ...
    RSBREL32: ClassVar[RELOCATION_ARM] = ...
    RXPC25: ClassVar[RELOCATION_ARM] = ...
    SBREL31: ClassVar[RELOCATION_ARM] = ...
    SBREL32: ClassVar[RELOCATION_ARM] = ...
    TARGET1: ClassVar[RELOCATION_ARM] = ...
    TARGET2: ClassVar[RELOCATION_ARM] = ...
    THM_ABS5: ClassVar[RELOCATION_ARM] = ...
    THM_ALU_PREL_11_0: ClassVar[RELOCATION_ARM] = ...
    THM_CALL: ClassVar[RELOCATION_ARM] = ...
    THM_JUMP11: ClassVar[RELOCATION_ARM] = ...
    THM_JUMP19: ClassVar[RELOCATION_ARM] = ...
    THM_JUMP24: ClassVar[RELOCATION_ARM] = ...
    THM_JUMP6: ClassVar[RELOCATION_ARM] = ...
    THM_JUMP8: ClassVar[RELOCATION_ARM] = ...
    THM_MOVT_ABS: ClassVar[RELOCATION_ARM] = ...
    THM_MOVT_BREL: ClassVar[RELOCATION_ARM] = ...
    THM_MOVT_PREL: ClassVar[RELOCATION_ARM] = ...
    THM_MOVW_ABS_NC: ClassVar[RELOCATION_ARM] = ...
    THM_MOVW_BREL: ClassVar[RELOCATION_ARM] = ...
    THM_MOVW_BREL_NC: ClassVar[RELOCATION_ARM] = ...
    THM_MOVW_PREL_NC: ClassVar[RELOCATION_ARM] = ...
    THM_PC12: ClassVar[RELOCATION_ARM] = ...
    THM_PC8: ClassVar[RELOCATION_ARM] = ...
    THM_RPC22: ClassVar[RELOCATION_ARM] = ...
    THM_SWI8: ClassVar[RELOCATION_ARM] = ...
    THM_TLS_CALL: ClassVar[RELOCATION_ARM] = ...
    THM_TLS_DESCSEQ16: ClassVar[RELOCATION_ARM] = ...
    THM_TLS_DESCSEQ32: ClassVar[RELOCATION_ARM] = ...
    THM_XPC22: ClassVar[RELOCATION_ARM] = ...
    TLS_CALL: ClassVar[RELOCATION_ARM] = ...
    TLS_DESC: ClassVar[RELOCATION_ARM] = ...
    TLS_DESCSEQ: ClassVar[RELOCATION_ARM] = ...
    TLS_DTPMOD32: ClassVar[RELOCATION_ARM] = ...
    TLS_DTPOFF32: ClassVar[RELOCATION_ARM] = ...
    TLS_GD32: ClassVar[RELOCATION_ARM] = ...
    TLS_GOTDESC: ClassVar[RELOCATION_ARM] = ...
    TLS_IE12GP: ClassVar[RELOCATION_ARM] = ...
    TLS_IE32: ClassVar[RELOCATION_ARM] = ...
    TLS_LDM32: ClassVar[RELOCATION_ARM] = ...
    TLS_LDO12: ClassVar[RELOCATION_ARM] = ...
    TLS_LDO32: ClassVar[RELOCATION_ARM] = ...
    TLS_LE12: ClassVar[RELOCATION_ARM] = ...
    TLS_LE32: ClassVar[RELOCATION_ARM] = ...
    TLS_TPOFF32: ClassVar[RELOCATION_ARM] = ...
    V4BX: ClassVar[RELOCATION_ARM] = ...
    XPC25: ClassVar[RELOCATION_ARM] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_ARM: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class RELOCATION_LOONGARCH:
    LARCH_32: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_32_PCREL: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_64: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ABS64_HI12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ABS64_LO20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ABS_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ABS_LO12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ADD16: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ADD24: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ADD32: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ADD64: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_ADD8: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_B16: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_B21: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_B26: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_COPY: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GNU_VTENTRY: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GNU_VTINHERIT: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GOT64_HI12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GOT64_LO20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GOT64_PC_HI12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GOT64_PC_LO20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GOT_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GOT_LO12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GOT_PC_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_GOT_PC_LO12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_IRELATIVE: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_JUMP_SLOT: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_MARK_LA: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_MARK_PCREL: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_NONE: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_PCALA64_HI12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_PCALA64_LO20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_PCALA_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_PCALA_LO12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_RELATIVE: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_RELAX: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_ADD: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_AND: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_ASSERT: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_IF_ELSE: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_NOT: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_S_0_10_10_16_S2: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_S_0_5_10_16_S2: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_S_10_12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_S_10_16: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_S_10_16_S2: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_S_10_5: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_S_5_20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_U: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_POP_32_U_10_12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_PUSH_ABSOLUTE: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_PUSH_DUP: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_PUSH_GPREL: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_PUSH_PCREL: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_PUSH_PLT_PCREL: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_PUSH_TLS_GD: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_PUSH_TLS_GOT: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_PUSH_TLS_TPREL: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_SL: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_SR: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SOP_SUB: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SUB16: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SUB24: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SUB32: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SUB64: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_SUB8: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_DTPMOD32: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_DTPMOD64: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_DTPREL32: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_DTPREL64: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_GD_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_GD_PC_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_IE64_HI12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_IE64_LO20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_IE64_PC_HI12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_IE64_PC_LO20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_IE_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_IE_LO12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_IE_PC_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_IE_PC_LO12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_LD_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_LD_PC_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_LE64_HI12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_LE64_LO20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_LE_HI20: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_LE_LO12: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_TPREL32: ClassVar[RELOCATION_LOONGARCH] = ...
    LARCH_TLS_TPREL64: ClassVar[RELOCATION_LOONGARCH] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_LOONGARCH: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class RELOCATION_MIPS:
    MIPS16_16: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_26: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_CALL16: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_GOT16: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_GPREL: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_TLS_DTPREL_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_TLS_DTPREL_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_TLS_GD: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_TLS_GOTTPREL: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_TLS_LDM: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_TLS_TPREL_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS16_TLS_TPREL_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_26: ClassVar[RELOCATION_MIPS] = ...
    MIPS_32: ClassVar[RELOCATION_MIPS] = ...
    MIPS_64: ClassVar[RELOCATION_MIPS] = ...
    MIPS_ADD_IMMEDIATE: ClassVar[RELOCATION_MIPS] = ...
    MIPS_CALL16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_CALL_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_CALL_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_COPY: ClassVar[RELOCATION_MIPS] = ...
    MIPS_DELETE: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GLOB_DAT: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GOT16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GOT_DISP: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GOT_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GOT_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GOT_OFST: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GOT_PAGE: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GPREL16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_GPREL32: ClassVar[RELOCATION_MIPS] = ...
    MIPS_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_HIGHER: ClassVar[RELOCATION_MIPS] = ...
    MIPS_HIGHEST: ClassVar[RELOCATION_MIPS] = ...
    MIPS_INSERT_A: ClassVar[RELOCATION_MIPS] = ...
    MIPS_INSERT_B: ClassVar[RELOCATION_MIPS] = ...
    MIPS_JALR: ClassVar[RELOCATION_MIPS] = ...
    MIPS_JUMP_SLOT: ClassVar[RELOCATION_MIPS] = ...
    MIPS_LITERAL: ClassVar[RELOCATION_MIPS] = ...
    MIPS_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_NONE: ClassVar[RELOCATION_MIPS] = ...
    MIPS_PC16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_PC18_S3: ClassVar[RELOCATION_MIPS] = ...
    MIPS_PC19_S2: ClassVar[RELOCATION_MIPS] = ...
    MIPS_PC21_S2: ClassVar[RELOCATION_MIPS] = ...
    MIPS_PC26_S2: ClassVar[RELOCATION_MIPS] = ...
    MIPS_PCHI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_PCLO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_PJUMP: ClassVar[RELOCATION_MIPS] = ...
    MIPS_REL16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_REL32: ClassVar[RELOCATION_MIPS] = ...
    MIPS_RELGOT: ClassVar[RELOCATION_MIPS] = ...
    MIPS_SCN_DISP: ClassVar[RELOCATION_MIPS] = ...
    MIPS_SHIFT5: ClassVar[RELOCATION_MIPS] = ...
    MIPS_SHIFT6: ClassVar[RELOCATION_MIPS] = ...
    MIPS_SUB: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_DTPMOD32: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_DTPMOD64: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_DTPREL32: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_DTPREL64: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_DTPREL_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_DTPREL_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_GD: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_GOTTPREL: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_LDM: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_TPREL32: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_TPREL64: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_TPREL_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_TLS_TPREL_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIPS_UNUSED1: ClassVar[RELOCATION_MIPS] = ...
    MIPS_UNUSED2: ClassVar[RELOCATION_MIPS] = ...
    MIPS_UNUSED3: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_26_S1: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_CALL16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_CALL_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_CALL_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_GOT16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_GOT_DISP: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_GOT_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_GOT_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_GOT_OFST: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_GOT_PAGE: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_GPREL16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_GPREL7_S2: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_HI0_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_HIGHER: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_HIGHEST: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_JALR: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_LITERAL: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_PC10_S1: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_PC16_S1: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_PC18_S3: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_PC19_S2: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_PC21_S2: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_PC23_S2: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_PC26_S2: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_PC7_S1: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_SCN_DISP: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_SUB: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_TLS_DTPREL_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_TLS_DTPREL_LO16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_TLS_GD: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_TLS_GOTTPREL: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_TLS_LDM: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_TLS_TPREL_HI16: ClassVar[RELOCATION_MIPS] = ...
    MIRCRO_MIPS_TLS_TPREL_LO16: ClassVar[RELOCATION_MIPS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_MIPS: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class RELOCATION_PPC:
    ADDR14: ClassVar[RELOCATION_PPC] = ...
    ADDR14_BRNTAKEN: ClassVar[RELOCATION_PPC] = ...
    ADDR14_BRTAKEN: ClassVar[RELOCATION_PPC] = ...
    ADDR16: ClassVar[RELOCATION_PPC] = ...
    ADDR16_HA: ClassVar[RELOCATION_PPC] = ...
    ADDR16_HI: ClassVar[RELOCATION_PPC] = ...
    ADDR16_LO: ClassVar[RELOCATION_PPC] = ...
    ADDR24: ClassVar[RELOCATION_PPC] = ...
    ADDR32: ClassVar[RELOCATION_PPC] = ...
    DTPMOD32: ClassVar[RELOCATION_PPC] = ...
    DTPREL16: ClassVar[RELOCATION_PPC] = ...
    DTPREL16_HA: ClassVar[RELOCATION_PPC] = ...
    DTPREL16_HI: ClassVar[RELOCATION_PPC] = ...
    DTPREL16_LO: ClassVar[RELOCATION_PPC] = ...
    DTPREL32: ClassVar[RELOCATION_PPC] = ...
    GOT16: ClassVar[RELOCATION_PPC] = ...
    GOT16_HA: ClassVar[RELOCATION_PPC] = ...
    GOT16_HI: ClassVar[RELOCATION_PPC] = ...
    GOT16_LO: ClassVar[RELOCATION_PPC] = ...
    GOT_DTPREL16: ClassVar[RELOCATION_PPC] = ...
    GOT_DTPREL16_HA: ClassVar[RELOCATION_PPC] = ...
    GOT_DTPREL16_HI: ClassVar[RELOCATION_PPC] = ...
    GOT_DTPREL16_LO: ClassVar[RELOCATION_PPC] = ...
    GOT_TLSGD16: ClassVar[RELOCATION_PPC] = ...
    GOT_TLSGD16_HA: ClassVar[RELOCATION_PPC] = ...
    GOT_TLSGD16_HI: ClassVar[RELOCATION_PPC] = ...
    GOT_TLSGD16_LO: ClassVar[RELOCATION_PPC] = ...
    GOT_TLSLD16: ClassVar[RELOCATION_PPC] = ...
    GOT_TLSLD16_HA: ClassVar[RELOCATION_PPC] = ...
    GOT_TLSLD16_HI: ClassVar[RELOCATION_PPC] = ...
    GOT_TLSLD16_LO: ClassVar[RELOCATION_PPC] = ...
    GOT_TPREL16: ClassVar[RELOCATION_PPC] = ...
    GOT_TPREL16_HA: ClassVar[RELOCATION_PPC] = ...
    GOT_TPREL16_HI: ClassVar[RELOCATION_PPC] = ...
    GOT_TPREL16_LO: ClassVar[RELOCATION_PPC] = ...
    JMP_SLOT: ClassVar[RELOCATION_PPC] = ...
    LOCAL24PC: ClassVar[RELOCATION_PPC] = ...
    NONE: ClassVar[RELOCATION_PPC] = ...
    PLTREL24: ClassVar[RELOCATION_PPC] = ...
    REL14: ClassVar[RELOCATION_PPC] = ...
    REL14_BRNTAKEN: ClassVar[RELOCATION_PPC] = ...
    REL14_BRTAKEN: ClassVar[RELOCATION_PPC] = ...
    REL16: ClassVar[RELOCATION_PPC] = ...
    REL16_HA: ClassVar[RELOCATION_PPC] = ...
    REL16_HI: ClassVar[RELOCATION_PPC] = ...
    REL16_LO: ClassVar[RELOCATION_PPC] = ...
    REL24: ClassVar[RELOCATION_PPC] = ...
    REL32: ClassVar[RELOCATION_PPC] = ...
    RELATIVE: ClassVar[RELOCATION_PPC] = ...
    TLS: ClassVar[RELOCATION_PPC] = ...
    TLSGD: ClassVar[RELOCATION_PPC] = ...
    TLSLD: ClassVar[RELOCATION_PPC] = ...
    TPREL16: ClassVar[RELOCATION_PPC] = ...
    TPREL16_HA: ClassVar[RELOCATION_PPC] = ...
    TPREL16_HI: ClassVar[RELOCATION_PPC] = ...
    TPREL16_LO: ClassVar[RELOCATION_PPC] = ...
    TPREL32: ClassVar[RELOCATION_PPC] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_PPC: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class RELOCATION_PPC64:
    ADDR14: ClassVar[RELOCATION_PPC64] = ...
    ADDR14_BRNTAKEN: ClassVar[RELOCATION_PPC64] = ...
    ADDR14_BRTAKEN: ClassVar[RELOCATION_PPC64] = ...
    ADDR16: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_DS: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_HA: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_HI: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_HIGHER: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_HIGHERA: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_HIGHEST: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_HIGHESTA: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_LO: ClassVar[RELOCATION_PPC64] = ...
    ADDR16_LO_DS: ClassVar[RELOCATION_PPC64] = ...
    ADDR24: ClassVar[RELOCATION_PPC64] = ...
    ADDR32: ClassVar[RELOCATION_PPC64] = ...
    ADDR64: ClassVar[RELOCATION_PPC64] = ...
    DTPMOD64: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_DS: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_HA: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_HI: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_HIGHER: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_HIGHERA: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_HIGHEST: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_HIGHESTA: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_LO: ClassVar[RELOCATION_PPC64] = ...
    DTPREL16_LO_DS: ClassVar[RELOCATION_PPC64] = ...
    DTPREL64: ClassVar[RELOCATION_PPC64] = ...
    GOT16: ClassVar[RELOCATION_PPC64] = ...
    GOT16_DS: ClassVar[RELOCATION_PPC64] = ...
    GOT16_HA: ClassVar[RELOCATION_PPC64] = ...
    GOT16_HI: ClassVar[RELOCATION_PPC64] = ...
    GOT16_LO: ClassVar[RELOCATION_PPC64] = ...
    GOT16_LO_DS: ClassVar[RELOCATION_PPC64] = ...
    GOT_DTPREL16_DS: ClassVar[RELOCATION_PPC64] = ...
    GOT_DTPREL16_HA: ClassVar[RELOCATION_PPC64] = ...
    GOT_DTPREL16_HI: ClassVar[RELOCATION_PPC64] = ...
    GOT_DTPREL16_LO_DS: ClassVar[RELOCATION_PPC64] = ...
    GOT_TLSGD16: ClassVar[RELOCATION_PPC64] = ...
    GOT_TLSGD16_HA: ClassVar[RELOCATION_PPC64] = ...
    GOT_TLSGD16_HI: ClassVar[RELOCATION_PPC64] = ...
    GOT_TLSGD16_LO: ClassVar[RELOCATION_PPC64] = ...
    GOT_TLSLD16: ClassVar[RELOCATION_PPC64] = ...
    GOT_TLSLD16_HA: ClassVar[RELOCATION_PPC64] = ...
    GOT_TLSLD16_HI: ClassVar[RELOCATION_PPC64] = ...
    GOT_TLSLD16_LO: ClassVar[RELOCATION_PPC64] = ...
    GOT_TPREL16_DS: ClassVar[RELOCATION_PPC64] = ...
    GOT_TPREL16_HA: ClassVar[RELOCATION_PPC64] = ...
    GOT_TPREL16_HI: ClassVar[RELOCATION_PPC64] = ...
    GOT_TPREL16_LO_DS: ClassVar[RELOCATION_PPC64] = ...
    JMP_SLOT: ClassVar[RELOCATION_PPC64] = ...
    NONE: ClassVar[RELOCATION_PPC64] = ...
    REL14: ClassVar[RELOCATION_PPC64] = ...
    REL14_BRNTAKEN: ClassVar[RELOCATION_PPC64] = ...
    REL14_BRTAKEN: ClassVar[RELOCATION_PPC64] = ...
    REL16: ClassVar[RELOCATION_PPC64] = ...
    REL16_HA: ClassVar[RELOCATION_PPC64] = ...
    REL16_HI: ClassVar[RELOCATION_PPC64] = ...
    REL16_LO: ClassVar[RELOCATION_PPC64] = ...
    REL24: ClassVar[RELOCATION_PPC64] = ...
    REL32: ClassVar[RELOCATION_PPC64] = ...
    REL64: ClassVar[RELOCATION_PPC64] = ...
    RELATIVE: ClassVar[RELOCATION_PPC64] = ...
    TLS: ClassVar[RELOCATION_PPC64] = ...
    TLSGD: ClassVar[RELOCATION_PPC64] = ...
    TLSLD: ClassVar[RELOCATION_PPC64] = ...
    TOC: ClassVar[RELOCATION_PPC64] = ...
    TOC16: ClassVar[RELOCATION_PPC64] = ...
    TOC16_DS: ClassVar[RELOCATION_PPC64] = ...
    TOC16_HA: ClassVar[RELOCATION_PPC64] = ...
    TOC16_HI: ClassVar[RELOCATION_PPC64] = ...
    TOC16_LO: ClassVar[RELOCATION_PPC64] = ...
    TOC16_LO_DS: ClassVar[RELOCATION_PPC64] = ...
    TPREL16: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_DS: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_HA: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_HI: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_HIGHER: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_HIGHERA: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_HIGHEST: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_HIGHESTA: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_LO: ClassVar[RELOCATION_PPC64] = ...
    TPREL16_LO_DS: ClassVar[RELOCATION_PPC64] = ...
    TPREL64: ClassVar[RELOCATION_PPC64] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_PPC64: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class RELOCATION_PURPOSES:
    DYNAMIC: ClassVar[RELOCATION_PURPOSES] = ...
    NONE: ClassVar[RELOCATION_PURPOSES] = ...
    OBJECT: ClassVar[RELOCATION_PURPOSES] = ...
    PLTGOT: ClassVar[RELOCATION_PURPOSES] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_PURPOSES: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class RELOCATION_X86_64:
    COPY: ClassVar[RELOCATION_X86_64] = ...
    DTPMOD64: ClassVar[RELOCATION_X86_64] = ...
    DTPOFF32: ClassVar[RELOCATION_X86_64] = ...
    DTPOFF64: ClassVar[RELOCATION_X86_64] = ...
    GLOB_DAT: ClassVar[RELOCATION_X86_64] = ...
    GOT32: ClassVar[RELOCATION_X86_64] = ...
    GOT64: ClassVar[RELOCATION_X86_64] = ...
    GOTOFF64: ClassVar[RELOCATION_X86_64] = ...
    GOTPC32: ClassVar[RELOCATION_X86_64] = ...
    GOTPC32_TLSDESC: ClassVar[RELOCATION_X86_64] = ...
    GOTPC64: ClassVar[RELOCATION_X86_64] = ...
    GOTPCREL: ClassVar[RELOCATION_X86_64] = ...
    GOTPCREL64: ClassVar[RELOCATION_X86_64] = ...
    GOTPCRELX: ClassVar[RELOCATION_X86_64] = ...
    GOTPLT64: ClassVar[RELOCATION_X86_64] = ...
    GOTTPOFF: ClassVar[RELOCATION_X86_64] = ...
    IRELATIVE: ClassVar[RELOCATION_X86_64] = ...
    JUMP_SLOT: ClassVar[RELOCATION_X86_64] = ...
    NONE: ClassVar[RELOCATION_X86_64] = ...
    PC16: ClassVar[RELOCATION_X86_64] = ...
    PC32: ClassVar[RELOCATION_X86_64] = ...
    PC32_BND: ClassVar[RELOCATION_X86_64] = ...
    PC64: ClassVar[RELOCATION_X86_64] = ...
    PC8: ClassVar[RELOCATION_X86_64] = ...
    PLT32: ClassVar[RELOCATION_X86_64] = ...
    PLT32_BND: ClassVar[RELOCATION_X86_64] = ...
    PLTOFF64: ClassVar[RELOCATION_X86_64] = ...
    R16: ClassVar[RELOCATION_X86_64] = ...
    R32: ClassVar[RELOCATION_X86_64] = ...
    R32S: ClassVar[RELOCATION_X86_64] = ...
    R64: ClassVar[RELOCATION_X86_64] = ...
    R8: ClassVar[RELOCATION_X86_64] = ...
    RELATIVE: ClassVar[RELOCATION_X86_64] = ...
    RELATIVE64: ClassVar[RELOCATION_X86_64] = ...
    REX_GOTPCRELX: ClassVar[RELOCATION_X86_64] = ...
    SIZE32: ClassVar[RELOCATION_X86_64] = ...
    SIZE64: ClassVar[RELOCATION_X86_64] = ...
    TLSDESC: ClassVar[RELOCATION_X86_64] = ...
    TLSDESC_CALL: ClassVar[RELOCATION_X86_64] = ...
    TLSGD: ClassVar[RELOCATION_X86_64] = ...
    TLSLD: ClassVar[RELOCATION_X86_64] = ...
    TPOFF32: ClassVar[RELOCATION_X86_64] = ...
    TPOFF64: ClassVar[RELOCATION_X86_64] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_X86_64: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class RELOCATION_i386:
    COPY: ClassVar[RELOCATION_i386] = ...
    GLOB_DAT: ClassVar[RELOCATION_i386] = ...
    GOT32: ClassVar[RELOCATION_i386] = ...
    GOTOFF: ClassVar[RELOCATION_i386] = ...
    GOTPC: ClassVar[RELOCATION_i386] = ...
    IRELATIVE: ClassVar[RELOCATION_i386] = ...
    JUMP_SLOT: ClassVar[RELOCATION_i386] = ...
    NONE: ClassVar[RELOCATION_i386] = ...
    NUM: ClassVar[RELOCATION_i386] = ...
    PC16: ClassVar[RELOCATION_i386] = ...
    PC32: ClassVar[RELOCATION_i386] = ...
    PC8: ClassVar[RELOCATION_i386] = ...
    PLT32: ClassVar[RELOCATION_i386] = ...
    R16: ClassVar[RELOCATION_i386] = ...
    R32: ClassVar[RELOCATION_i386] = ...
    R32PLT: ClassVar[RELOCATION_i386] = ...
    R8: ClassVar[RELOCATION_i386] = ...
    RELATIVE: ClassVar[RELOCATION_i386] = ...
    TLS_DESC: ClassVar[RELOCATION_i386] = ...
    TLS_DESC_CALL: ClassVar[RELOCATION_i386] = ...
    TLS_DTPMOD32: ClassVar[RELOCATION_i386] = ...
    TLS_DTPOFF32: ClassVar[RELOCATION_i386] = ...
    TLS_GD: ClassVar[RELOCATION_i386] = ...
    TLS_GD_32: ClassVar[RELOCATION_i386] = ...
    TLS_GD_CALL: ClassVar[RELOCATION_i386] = ...
    TLS_GD_POP: ClassVar[RELOCATION_i386] = ...
    TLS_GD_PUSH: ClassVar[RELOCATION_i386] = ...
    TLS_GOTDESC: ClassVar[RELOCATION_i386] = ...
    TLS_GOTIE: ClassVar[RELOCATION_i386] = ...
    TLS_IE: ClassVar[RELOCATION_i386] = ...
    TLS_IE_32: ClassVar[RELOCATION_i386] = ...
    TLS_LDM: ClassVar[RELOCATION_i386] = ...
    TLS_LDM_32: ClassVar[RELOCATION_i386] = ...
    TLS_LDM_CALL: ClassVar[RELOCATION_i386] = ...
    TLS_LDM_POP: ClassVar[RELOCATION_i386] = ...
    TLS_LDM_PUSH: ClassVar[RELOCATION_i386] = ...
    TLS_LDO_32: ClassVar[RELOCATION_i386] = ...
    TLS_LE: ClassVar[RELOCATION_i386] = ...
    TLS_LE_32: ClassVar[RELOCATION_i386] = ...
    TLS_TPOFF: ClassVar[RELOCATION_i386] = ...
    TLS_TPOFF32: ClassVar[RELOCATION_i386] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.RELOCATION_i386: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class Relocation(lief.Relocation):
    addend: int
    info: int
    purpose: lief.ELF.RELOCATION_PURPOSES
    symbol: lief.ELF.Symbol
    type: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arch: lief.ELF.ARCH) -> None: ...
    @overload
    def __init__(self, address: int, type: int = ..., addend: int = ..., is_rela: bool = ...) -> None: ...
    @property
    def has_section(self) -> bool: ...
    @property
    def has_symbol(self) -> bool: ...
    @property
    def is_rel(self) -> bool: ...
    @property
    def is_rela(self) -> bool: ...
    @property
    def section(self) -> lief.ELF.Section: ...
    @property
    def symbol_table(self) -> lief.ELF.Section: ...

class SECTION_FLAGS:
    ALLOC: ClassVar[SECTION_FLAGS] = ...
    EXECINSTR: ClassVar[SECTION_FLAGS] = ...
    GROUP: ClassVar[SECTION_FLAGS] = ...
    HEX_GPREL: ClassVar[SECTION_FLAGS] = ...
    INFO_LINK: ClassVar[SECTION_FLAGS] = ...
    LINK_ORDER: ClassVar[SECTION_FLAGS] = ...
    MASKOS: ClassVar[SECTION_FLAGS] = ...
    MASKPROC: ClassVar[SECTION_FLAGS] = ...
    MERGE: ClassVar[SECTION_FLAGS] = ...
    MIPS_STRING: ClassVar[SECTION_FLAGS] = ...
    NONE: ClassVar[SECTION_FLAGS] = ...
    OS_NONCONFORMING: ClassVar[SECTION_FLAGS] = ...
    SHF_CP_SECTION: ClassVar[SECTION_FLAGS] = ...
    STRINGS: ClassVar[SECTION_FLAGS] = ...
    TLS: ClassVar[SECTION_FLAGS] = ...
    WRITE: ClassVar[SECTION_FLAGS] = ...
    XCORE_SHF_CP_SECTION: ClassVar[SECTION_FLAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.SECTION_FLAGS: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.SECTION_FLAGS, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.SECTION_FLAGS, /) -> lief.ELF.SECTION_FLAGS: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.SECTION_FLAGS, /) -> int: ...
    @property
    def value(self) -> int: ...

class SECTION_TYPES:
    ANDROID_REL: ClassVar[SECTION_TYPES] = ...
    ANDROID_RELA: ClassVar[SECTION_TYPES] = ...
    ARM_ATTRIBUTES: ClassVar[SECTION_TYPES] = ...
    ARM_DEBUGOVERLAY: ClassVar[SECTION_TYPES] = ...
    ARM_EXIDX: ClassVar[SECTION_TYPES] = ...
    ARM_OVERLAYSECTION: ClassVar[SECTION_TYPES] = ...
    ARM_PREEMPTMAP: ClassVar[SECTION_TYPES] = ...
    DYNAMIC: ClassVar[SECTION_TYPES] = ...
    DYNSYM: ClassVar[SECTION_TYPES] = ...
    FINI_ARRAY: ClassVar[SECTION_TYPES] = ...
    GNU_ATTRIBUTES: ClassVar[SECTION_TYPES] = ...
    GNU_HASH: ClassVar[SECTION_TYPES] = ...
    GNU_VERDEF: ClassVar[SECTION_TYPES] = ...
    GNU_VERNEED: ClassVar[SECTION_TYPES] = ...
    GROUP: ClassVar[SECTION_TYPES] = ...
    HASH: ClassVar[SECTION_TYPES] = ...
    HIOS: ClassVar[SECTION_TYPES] = ...
    HIPROC: ClassVar[SECTION_TYPES] = ...
    HIUSER: ClassVar[SECTION_TYPES] = ...
    INIT_ARRAY: ClassVar[SECTION_TYPES] = ...
    LLVM_ADDRSIG: ClassVar[SECTION_TYPES] = ...
    LOOS: ClassVar[SECTION_TYPES] = ...
    LOPROC: ClassVar[SECTION_TYPES] = ...
    LOUSER: ClassVar[SECTION_TYPES] = ...
    NOBITS: ClassVar[SECTION_TYPES] = ...
    NOTE: ClassVar[SECTION_TYPES] = ...
    NULL: ClassVar[SECTION_TYPES] = ...
    PREINIT_ARRAY: ClassVar[SECTION_TYPES] = ...
    PROGBITS: ClassVar[SECTION_TYPES] = ...
    REL: ClassVar[SECTION_TYPES] = ...
    RELA: ClassVar[SECTION_TYPES] = ...
    RELR: ClassVar[SECTION_TYPES] = ...
    SHLIB: ClassVar[SECTION_TYPES] = ...
    STRTAB: ClassVar[SECTION_TYPES] = ...
    SYMTAB: ClassVar[SECTION_TYPES] = ...
    SYMTAB_SHNDX: ClassVar[SECTION_TYPES] = ...
    X86_64_UNWIND: ClassVar[SECTION_TYPES] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.SECTION_TYPES: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class SEGMENT_FLAGS:
    NONE: ClassVar[SEGMENT_FLAGS] = ...
    R: ClassVar[SEGMENT_FLAGS] = ...
    W: ClassVar[SEGMENT_FLAGS] = ...
    X: ClassVar[SEGMENT_FLAGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.SEGMENT_FLAGS: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    @overload
    def __and__(self, arg: int, /) -> int: ...
    @overload
    def __and__(self, arg: lief.ELF.SEGMENT_FLAGS, /) -> int: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, arg: int, /) -> bool: ...
    def __gt__(self, arg: int, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __le__(self, arg: int, /) -> bool: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, arg: int, /) -> bool: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    @overload
    def __or__(self, arg: int, /) -> int: ...
    @overload
    def __or__(self, arg: lief.ELF.SEGMENT_FLAGS, /) -> lief.ELF.SEGMENT_FLAGS: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, arg: int, /) -> int: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, arg: int, /) -> int: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, arg: int, /) -> int: ...
    def __sub__(self, other) -> Any: ...
    @overload
    def __xor__(self, arg: int, /) -> int: ...
    @overload
    def __xor__(self, arg: lief.ELF.SEGMENT_FLAGS, /) -> int: ...
    @property
    def value(self) -> int: ...

class SEGMENT_TYPES:
    ARM_ARCHEXT: ClassVar[SEGMENT_TYPES] = ...
    ARM_UNWIND: ClassVar[SEGMENT_TYPES] = ...
    DYNAMIC: ClassVar[SEGMENT_TYPES] = ...
    GNU_EH_FRAME: ClassVar[SEGMENT_TYPES] = ...
    GNU_PROPERTY: ClassVar[SEGMENT_TYPES] = ...
    GNU_RELRO: ClassVar[SEGMENT_TYPES] = ...
    GNU_STACK: ClassVar[SEGMENT_TYPES] = ...
    INTERP: ClassVar[SEGMENT_TYPES] = ...
    LOAD: ClassVar[SEGMENT_TYPES] = ...
    NOTE: ClassVar[SEGMENT_TYPES] = ...
    NULL: ClassVar[SEGMENT_TYPES] = ...
    PHDR: ClassVar[SEGMENT_TYPES] = ...
    SHLIB: ClassVar[SEGMENT_TYPES] = ...
    TLS: ClassVar[SEGMENT_TYPES] = ...
    UNWIND: ClassVar[SEGMENT_TYPES] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.SEGMENT_TYPES: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class SYMBOL_BINDINGS:
    GLOBAL: ClassVar[SYMBOL_BINDINGS] = ...
    GNU_UNIQUE: ClassVar[SYMBOL_BINDINGS] = ...
    LOCAL: ClassVar[SYMBOL_BINDINGS] = ...
    WEAK: ClassVar[SYMBOL_BINDINGS] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.SYMBOL_BINDINGS: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class SYMBOL_SECTION_INDEX:
    ABS: ClassVar[SYMBOL_SECTION_INDEX] = ...
    COMMON: ClassVar[SYMBOL_SECTION_INDEX] = ...
    UNDEF: ClassVar[SYMBOL_SECTION_INDEX] = ...
    XINDEX: ClassVar[SYMBOL_SECTION_INDEX] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.SYMBOL_SECTION_INDEX: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class SYMBOL_TYPES:
    COMMON: ClassVar[SYMBOL_TYPES] = ...
    FILE: ClassVar[SYMBOL_TYPES] = ...
    FUNC: ClassVar[SYMBOL_TYPES] = ...
    GNU_IFUNC: ClassVar[SYMBOL_TYPES] = ...
    NOTYPE: ClassVar[SYMBOL_TYPES] = ...
    OBJECT: ClassVar[SYMBOL_TYPES] = ...
    SECTION: ClassVar[SYMBOL_TYPES] = ...
    TLS: ClassVar[SYMBOL_TYPES] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.SYMBOL_TYPES: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class SYMBOL_VISIBILITY:
    DEFAULT: ClassVar[SYMBOL_VISIBILITY] = ...
    HIDDEN: ClassVar[SYMBOL_VISIBILITY] = ...
    INTERNAL: ClassVar[SYMBOL_VISIBILITY] = ...
    PROTECTED: ClassVar[SYMBOL_VISIBILITY] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.SYMBOL_VISIBILITY: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class Section(lief.Section):
    class it_segments:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Segment: ...
        def __iter__(self) -> lief.ELF.Section.it_segments: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Segment: ...
    alignment: int
    entry_size: int
    file_offset: int
    flags: int
    information: int
    link: int
    type: lief.ELF.SECTION_TYPES
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, type: lief.ELF.SECTION_TYPES = ...) -> None: ...
    def add(self, flag: lief.ELF.SECTION_FLAGS) -> None: ...
    def as_frame(self) -> lief.ELF.Section: ...
    def clear(self, value: int = ...) -> lief.ELF.Section: ...
    @overload
    def has(self, flag: lief.ELF.SECTION_FLAGS) -> bool: ...
    @overload
    def has(self, segment: lief.ELF.Segment) -> bool: ...
    def remove(self, flag: lief.ELF.SECTION_FLAGS) -> None: ...
    @overload
    def __contains__(self, arg: lief.ELF.SECTION_FLAGS, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.Segment, /) -> bool: ...
    def __iadd__(self, arg: lief.ELF.SECTION_FLAGS, /) -> lief.ELF.Section: ...
    def __isub__(self, arg: lief.ELF.SECTION_FLAGS, /) -> lief.ELF.Section: ...
    @property
    def flags_list(self) -> set[lief.ELF.SECTION_FLAGS]: ...
    @property
    def is_frame(self) -> bool: ...
    @property
    def original_size(self) -> int: ...
    @property
    def segments(self) -> lief.ELF.Section.it_segments: ...

class Segment(lief.Object):
    class it_sections:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.Section: ...
        def __iter__(self) -> lief.ELF.Segment.it_sections: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.Section: ...
    alignment: int
    content: memoryview
    file_offset: int
    flags: lief.ELF.SEGMENT_FLAGS
    physical_address: int
    physical_size: int
    type: lief.ELF.SEGMENT_TYPES
    virtual_address: int
    virtual_size: int
    def __init__(self) -> None: ...
    def add(self, flag: lief.ELF.SEGMENT_FLAGS) -> None: ...
    @staticmethod
    def from_raw(arg: bytes, /) -> Union[lief.ELF.Segment,lief.lief_errors]: ...
    @overload
    def has(self, flag: lief.ELF.SEGMENT_FLAGS) -> bool: ...
    @overload
    def has(self, section: lief.ELF.Section) -> bool: ...
    @overload
    def has(self, section_name: str) -> bool: ...
    def remove(self, flag: lief.ELF.SEGMENT_FLAGS) -> None: ...
    @overload
    def __contains__(self, arg: lief.ELF.SEGMENT_FLAGS, /) -> bool: ...
    @overload
    def __contains__(self, arg: lief.ELF.Section, /) -> bool: ...
    @overload
    def __contains__(self, arg: str, /) -> bool: ...
    def __iadd__(self, arg: lief.ELF.SEGMENT_FLAGS, /) -> lief.ELF.Segment: ...
    def __isub__(self, arg: lief.ELF.SEGMENT_FLAGS, /) -> lief.ELF.Segment: ...
    @property
    def sections(self) -> lief.ELF.Segment.it_sections: ...

class StackSize(NoteGnuProperty.Property):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def stack_size(self) -> int: ...

class Symbol(lief.Symbol):
    binding: lief.ELF.SYMBOL_BINDINGS
    exported: bool
    imported: bool
    information: int
    other: int
    shndx: int
    size: int
    type: lief.ELF.SYMBOL_TYPES
    value: int
    visibility: lief.ELF.SYMBOL_VISIBILITY
    def __init__(self) -> None: ...
    @property
    def demangled_name(self) -> str: ...
    @property
    def has_version(self) -> bool: ...
    @property
    def is_function(self) -> bool: ...
    @property
    def is_static(self) -> bool: ...
    @property
    def is_variable(self) -> bool: ...
    @property
    def section(self) -> lief.ELF.Section: ...
    @property
    def symbol_version(self) -> lief.ELF.SymbolVersion: ...

class SymbolVersion(lief.Object):
    symbol_version_auxiliary: lief.ELF.SymbolVersionAux
    value: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg: int, /) -> None: ...
    @property
    def global_(self) -> lief.ELF.SymbolVersion: ...
    @property
    def has_auxiliary_version(self) -> bool: ...
    @property
    def local(self) -> lief.ELF.SymbolVersion: ...

class SymbolVersionAux(lief.Object):
    name: Union[str,bytes]
    def __init__(self, *args, **kwargs) -> None: ...

class SymbolVersionAuxRequirement(SymbolVersionAux):
    flags: int
    hash: int
    other: int
    def __init__(self) -> None: ...

class SymbolVersionDefinition(lief.Object):
    class it_version_aux:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.SymbolVersionAux: ...
        def __iter__(self) -> lief.ELF.SymbolVersionDefinition.it_version_aux: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.SymbolVersionAux: ...
    flags: int
    hash: int
    version: int
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def auxiliary_symbols(self) -> lief.ELF.SymbolVersionDefinition.it_version_aux: ...
    @property
    def ndx(self) -> int: ...

class SymbolVersionRequirement(lief.Object):
    class it_aux_requirement:
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, arg: int, /) -> lief.ELF.SymbolVersionAuxRequirement: ...
        def __iter__(self) -> lief.ELF.SymbolVersionRequirement.it_aux_requirement: ...
        def __len__(self) -> int: ...
        def __next__(self) -> lief.ELF.SymbolVersionAuxRequirement: ...
    name: str
    version: int
    def __init__(self, *args, **kwargs) -> None: ...
    def add_auxiliary_requirement(self, arg: lief.ELF.SymbolVersionAuxRequirement, /) -> lief.ELF.SymbolVersionAuxRequirement: ...
    def get_auxiliary_symbols(self) -> lief.ELF.SymbolVersionRequirement.it_aux_requirement: ...

class SysvHash(lief.Object):
    nchain: int
    def __init__(self) -> None: ...
    @property
    def buckets(self) -> list[int]: ...
    @property
    def chains(self) -> list[int]: ...
    @property
    def nbucket(self) -> int: ...

class VERSION:
    CURRENT: ClassVar[VERSION] = ...
    NONE: ClassVar[VERSION] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_value(arg: int, /) -> lief.ELF.VERSION: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    @property
    def value(self) -> int: ...

class X86Features(NoteGnuProperty.Property):
    class FEATURE:
        FXSR: ClassVar[X86Features.FEATURE] = ...
        IBT: ClassVar[X86Features.FEATURE] = ...
        LAM_U48: ClassVar[X86Features.FEATURE] = ...
        LAM_U57: ClassVar[X86Features.FEATURE] = ...
        MASK: ClassVar[X86Features.FEATURE] = ...
        MMX: ClassVar[X86Features.FEATURE] = ...
        SHSTK: ClassVar[X86Features.FEATURE] = ...
        TMM: ClassVar[X86Features.FEATURE] = ...
        UNKNOWN: ClassVar[X86Features.FEATURE] = ...
        X86: ClassVar[X86Features.FEATURE] = ...
        X87: ClassVar[X86Features.FEATURE] = ...
        XMM: ClassVar[X86Features.FEATURE] = ...
        XSAVE: ClassVar[X86Features.FEATURE] = ...
        XSAVEC: ClassVar[X86Features.FEATURE] = ...
        XSAVEOPT: ClassVar[X86Features.FEATURE] = ...
        YMM: ClassVar[X86Features.FEATURE] = ...
        ZMM: ClassVar[X86Features.FEATURE] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def from_value(arg: int, /) -> lief.ELF.X86Features.FEATURE: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        @property
        def value(self) -> int: ...

    class FLAG:
        NEEDED: ClassVar[X86Features.FLAG] = ...
        NONE: ClassVar[X86Features.FLAG] = ...
        USED: ClassVar[X86Features.FLAG] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def from_value(arg: int, /) -> lief.ELF.X86Features.FLAG: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def features(self) -> list[tuple[lief.ELF.X86Features.FLAG,lief.ELF.X86Features.FEATURE]]: ...

class X86ISA(NoteGnuProperty.Property):
    class FLAG:
        NEEDED: ClassVar[X86ISA.FLAG] = ...
        NONE: ClassVar[X86ISA.FLAG] = ...
        USED: ClassVar[X86ISA.FLAG] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def from_value(arg: int, /) -> lief.ELF.X86ISA.FLAG: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        @property
        def value(self) -> int: ...

    class ISA:
        AVX: ClassVar[X86ISA.ISA] = ...
        AVX2: ClassVar[X86ISA.ISA] = ...
        AVX512BW: ClassVar[X86ISA.ISA] = ...
        AVX512CD: ClassVar[X86ISA.ISA] = ...
        AVX512DQ: ClassVar[X86ISA.ISA] = ...
        AVX512ER: ClassVar[X86ISA.ISA] = ...
        AVX512F: ClassVar[X86ISA.ISA] = ...
        AVX512PF: ClassVar[X86ISA.ISA] = ...
        AVX512VL: ClassVar[X86ISA.ISA] = ...
        AVX512_4FMAPS: ClassVar[X86ISA.ISA] = ...
        AVX512_4VNNIW: ClassVar[X86ISA.ISA] = ...
        AVX512_BF16: ClassVar[X86ISA.ISA] = ...
        AVX512_BITALG: ClassVar[X86ISA.ISA] = ...
        AVX512_IFMA: ClassVar[X86ISA.ISA] = ...
        AVX512_VBMI: ClassVar[X86ISA.ISA] = ...
        AVX512_VBMI2: ClassVar[X86ISA.ISA] = ...
        AVX512_VNNI: ClassVar[X86ISA.ISA] = ...
        BASELINE: ClassVar[X86ISA.ISA] = ...
        CMOV: ClassVar[X86ISA.ISA] = ...
        FMA: ClassVar[X86ISA.ISA] = ...
        I486: ClassVar[X86ISA.ISA] = ...
        I586: ClassVar[X86ISA.ISA] = ...
        I686: ClassVar[X86ISA.ISA] = ...
        SSE: ClassVar[X86ISA.ISA] = ...
        SSE2: ClassVar[X86ISA.ISA] = ...
        SSE3: ClassVar[X86ISA.ISA] = ...
        SSE4_1: ClassVar[X86ISA.ISA] = ...
        SSE4_2: ClassVar[X86ISA.ISA] = ...
        SSSE3: ClassVar[X86ISA.ISA] = ...
        UNKNOWN: ClassVar[X86ISA.ISA] = ...
        V2: ClassVar[X86ISA.ISA] = ...
        V3: ClassVar[X86ISA.ISA] = ...
        V4: ClassVar[X86ISA.ISA] = ...
        __name__: str
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def from_value(arg: int, /) -> lief.ELF.X86ISA.ISA: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def values(self) -> list[tuple[lief.ELF.X86ISA.FLAG,lief.ELF.X86ISA.ISA]]: ...

@overload
def parse(filename: str, config: lief.ELF.ParserConfig = ...) -> Optional[lief.ELF.Binary]: ...
@overload
def parse(raw: list[int], config: lief.ELF.ParserConfig = ...) -> Optional[lief.ELF.Binary]: ...
@overload
def parse(obj: Union[io.IOBase|os.PathLike], config: lief.ELF.ParserConfig = ...) -> Optional[lief.ELF.Binary]: ...
